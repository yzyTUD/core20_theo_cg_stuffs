
    preview_pass
        seedonline  
            color buffer, framebuffer ... 
            double mode, (glut display mode? )
            intro.
                TC 的老旧图形接口
                OpenGL 是一个工业标准，它的技术紧跟时代，现今各个显卡厂家无一不对 OpenGL 提供强力支持，
            _basic_offline learnopengl_ok
            Rendering Pipeline
            GLUT related
                The OpenGL Utility Toolkit, can be used to render the gui fw 
                The original GLUT has been unsupported for 20 years
                freeglut now 
                本来 OpenGL 程序一般还要包含<GL/gl.h>和<GL/glu.h>, 但是glut进行了一定程度的封装
                以 glut 开头的函数都是该库提供的
                it has not only window sys. 
                qq what kinds of func. are provided in glut? 
                    func. 
                        window sys. 
                            GLUTAPI void APIENTRY glutInitWindowPosition(int x, int y);
                            GLUTAPI void APIENTRY glutInitWindowSize(int width, int height);
                            GLUTAPI void APIENTRY glutMainLoop(void);
                            glutCreateSubWindow
                            glutFullScreen
                        overlay 
                            glutShowOverlay
                        menu 
                            glutCreateMenu
                        set timer 
                            glutTimerFunc
                        mouse, key 
                            glutIgnoreKeyRepeat
                        pre-built models
                            glutWireTorus, glutSolidTorus
                            GLUTAPI void APIENTRY glutWireDodecahedron(void);
                            GLUTAPI void APIENTRY glutSolidDodecahedron(void);
                            GLUTAPI void APIENTRY glutWireSphere(GLdouble radius, GLint slices, GLint stacks);
                            GLUTAPI void APIENTRY glutSolidSphere(GLdouble radius, GLint slices, GLint stacks);
                            GLUTAPI void APIENTRY glutWireCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
                            GLUTAPI void APIENTRY glutSolidCone(GLdouble base, GLdouble height, GLint slices, GLint stacks);
                            GLUTAPI void APIENTRY glutWireCube(GLdouble size);
                            GLUTAPI void APIENTRY glutSolidCube(GLdouble size);
                            GLUTAPI void APIENTRY glutWireTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
                            GLUTAPI void APIENTRY glutSolidTorus(GLdouble innerRadius, GLdouble outerRadius, GLint sides, GLint rings);
                            GLUTAPI void APIENTRY glutWireDodecahedron(void);
                            GLUTAPI void APIENTRY glutSolidDodecahedron(void);
                            GLUTAPI void APIENTRY glutWireTeapot(GLdouble size);
                            GLUTAPI void APIENTRY glutSolidTeapot(GLdouble size);
                            GLUTAPI void APIENTRY glutWireOctahedron(void);
                            GLUTAPI void APIENTRY glutSolidOctahedron(void);
                            GLUTAPI void APIENTRY glutWireTetrahedron(void);
                            GLUTAPI void APIENTRY glutSolidTetrahedron(void);
                            GLUTAPI void APIENTRY glutWireIcosahedron(void);
                            GLUTAPI void APIENTRY glutSolidIcosahedron(void);
                        
                    field 
                        mouse/keyboard interaction 
                            /* Mouse buttons. */
                            #define GLUT_LEFT_BUTTON		0
                            #define GLUT_MIDDLE_BUTTON		1
                            #define GLUT_RIGHT_BUTTON		2    
                        Menu
                        right click menu 
                        define the shape of a corsor 
                            GLUT_CURSOR_INFO
                GLUT_SINGLE 表示使用单缓冲，与之对应的还有 GLUT_DOUBLE（使用双缓冲）
                glutDisplayFunc，设置一个函数，当需要进行画图时，这个函数就会被调用。（这个说法不够准确
                glClear 函数还可以清除其它的东西
                glFlush，保证前面的 OpenGL 命令立即执行
                qq why always use triangles? 
                    OpenGL 为了效率，放宽了检查，这可能导致显示错误。要避免这个错误，尽量使用
                    三角形，因为三角形都是凸多边形）
            gl related func. (Legacy mode)
            渲染器
            lighting各种光源类型
            brdf
            cook-torance
            ...
        seedfrombookcpt
            Lighting
                Colors
                Basic Lighting
                Materials
                Lighting maps
                Light casters
                Multiple lights
            chapters--interactive computer graphics 6th edition shader based
                Physically Based Models and Particle Systems
                CURVES AND SURFACES
            chapters--OpenGL.Programming.Guide.8th (red book )
            chapters--pbrt: http://www.pbr-book.org/3ed-2018/contents.html
                1 Introduction
                    1.1 Literate Programming
                        in the course of reading this book, you will read the full implementation of 
                            the pbrt rendering system, not just a high-level description of it.
                        Our literate programming system is homegrown, but it was heavily influenced 
                            by Norman Ramsey’s noweb system.
                        The literate programming metalanguage provides two important features. The first 
                            is the ability to mix prose with source code. 
                        Literate programs are written in a metalanguage that mixes a document formatting 
                            language (e.g., TEX or HTML) and a programming language (e.g., C++). 
                        This feature makes the description of the program just as important as its actual source code, 
                            encouraging careful design and documentation
                        Each named block of code is called a fragment, and each fragment can refer to other fragments by name.
                        a human reader would much rather see the initialization code for each variable presented separately, near the code that actually declares and uses the variable.
                        This defines a fragment, called <<Function Definitions>>, that contains the definition of the InitGlobals() function. The InitGlobals() 
                            function itself refers to another fragment, <<Initialize Global Variables>>.
                        *h- having the fragment name is just the right level of abstraction
                        h- In this way, we can decompose complex functions into logically distinct parts
                        *h- we can write a complicated function as a series of fragments:
                        each fragment are expanded inline in complexFunc() for compilation.
                        In the document, we can introduce each fragment and its implementation in turn.
                        This decomposition lets us present code a few lines at a time, making it easier to understand. 
                        h- logical fragments, each with a single and well-delineated purpose, each one can then be written, verified, or read independently
                        h- we can refine them easily 
                        *h- this way is meaningful when we try to make each fragment less than 10 lines long.
                        literate programming system
                        just an enhanced macro substitution package tuned to the task of rearranging program source code.
                        This may seem like a trivial change, but in fact literate programming is quite different from other ways of structuring software systems.
                    1.2 Photorealistic Rendering and the Ray-Tracing Algorithm
                    1.3 pbrt: System Overview
                    1.4 Parallelization of pbrt
                    1.5 How to Proceed through This Book
                    1.6 Using and Understanding the Code
                    1.7 A Brief History of Physically Based Rendering
                    Further Reading
                    Exercises
                2 Geometry and Transformations
                    2.1 Coordinate Systems
                    2.2 Vectors
                    2.3 Points
                    2.4 Normals
                    2.5 Rays
                    2.6 Bounding Boxes
                    2.7 Transformations
                    2.8 Applying Transformations
                    2.9 Animating Transformations
                    2.10 Interactions
                    Further Reading
                    Exercises
                3 Shapes
                    3.1 Basic Shape Interface
                    3.2 Spheres
                    3.3 Cylinders
                    3.4 Disks
                    3.5 Other Quadrics
                    3.6 Triangle Meshes
                    3.7 Curves
                    3.8 Subdivision Surfaces
                    3.9 Managing Rounding Error
                    Further Reading
                    Exercises
                4 Primitives and Intersection Acceleration
                    4.1 Primitive Interface and Geometric Primitives
                    4.2 Aggregates
                    4.3 Bounding Volume Hierarchies
                    4.4 Kd-Tree Accelerator
                    Further Reading
                    Exercises
                5 Color and Radiometry
                    5.1 Spectral Representation
                    5.2 The SampledSpectrum Class
                    5.3 RGBSpectrum Implementation
                    5.4 Radiometry
                    5.5 Working with Radiometric Integrals
                    5.6 Surface Reflection
                    Further Reading
                    Exercises
                6 Camera Models
                    6.1 Camera Model
                    6.2 Projective Camera Models
                    6.3 Environment Camera
                    6.4 Realistic Cameras
                    Further Reading
                    Exercises
                7 Sampling and Reconstruction
                    7.1 Sampling Theory
                    7.2 Sampling Interface
                    7.3 Stratified Sampling
                    7.4 The Halton Sampler
                    7.5 (0, 2)-Sequence Sampler
                    7.6 Maximized Minimal Distance Sampler
                    7.7 Sobol’ Sampler
                    7.8 Image Reconstruction
                    7.9 Film and the Imaging Pipeline
                    Further Reading
                    Exercises
                8 Reflection Models
                    8.1 Basic Interface
                    8.2 Specular Reflection and Transmission
                    8.3 Lambertian Reflection
                    8.4 Microfacet Models
                    8.5 Fresnel Incidence Effects
                    8.6 Fourier Basis BSDFs
                    Further Reading
                    Exercises
                9 Materials
                    9.1 BSDFs
                    9.2 Material Interface and Implementations
                    9.3 Bump Mapping
                    Further Reading
                    Exercises
                10 Texture
                    10.1 Sampling and Antialiasing
                    10.2 Texture Coordinate Generation
                    10.3 Texture Interface and Basic Textures
                    10.4 Image Texture
                    10.5 Solid and Procedural Texturing
                    10.6 Noise
                    Further Reading
                    Exercises
                11 Volume Scattering
                    11.1 Volume Scattering Processes
                    11.2 Phase Functions
                    11.3 Media
                    11.4 The BSSRDF
                    Further Reading
                    Exercises
                12 Light Sources
                    12.1 Light Emission
                    12.2 Light Interface
                    12.3 Point Lights
                    12.4 Distant Lights
                    12.5 Area Lights
                    12.6 Infinite Area Lights
                    Further Reading
                    Exercises
                13 Monte Carlo Integration
                    13.1 Background and Probability Review
                    13.2 The Monte Carlo Estimator
                    13.3 Sampling Random Variables
                    13.4 Metropolis Sampling
                    13.5 Transforming between Distributions
                    13.6 2D Sampling with Multidimensional Transformations
                    13.7 Russian Roulette and Splitting
                    13.8 Careful Sample Placement
                    13.9 Bias
                    13.10 Importance Sampling
                    Further Reading
                    Exercises
                14 Light Transport I: Surface Reflection
                    14.1 Sampling Reflection Functions
                    14.2 Sampling Light Sources
                    14.3 Direct Lighting
                    14.4 The Light Transport Equation
                    14.5 Path Tracing
                    Further Reading
                    Exercises
                15 Light Transport II: Volume Rendering
                    15.1 The Equation of Transfer
                    15.2 Sampling Volume Scattering
                    15.3 Volumetric Light Transport
                    15.4 Sampling Subsurface Reflection Functions
                    15.5 Subsurface Scattering Using the Diffusion Equation
                    Further Reading
                    Exercises
                16 Light Transport III: Bidirectional Methods
                    16.1 The Path-Space Measurement Equation
                    16.2 Stochastic Progressive Photon Mapping
                    16.3 Bidirectional Path Tracing
                    16.4 Metropolis Light Transport
                    Further Reading
                    Exercises
                17 Retrospective and The Future
                    17.1 Design Retrospective
                    17.2 Alternative Hardware Architectures
                    17.3 Conclusion
                    Further Reading
                A Utilities
                    A.1 Main Include File
                    A.2 Image File Input and Output
                    A.3 Communicating with the User
                    A.4 Memory Management
                    A.5 Mathematical Routines
                    A.6 Parallelism
                    A.7 Statistics
                    Further Reading
                    Exercises
                B Scene Description Interface
                    B.1 Parameter Sets
                    B.2 Initialization and Rendering Options
                    B.3 Scene Definition
                    B.4 Adding New Object Implementations
                    Further Reading
                    Exercises     
        seedfrompapercpt
        seedfromcodelibs
            lib--https://www.graphics.rwth-aachen.de/software/openflipper/
            lib--https://www.graphics.rwth-aachen.de/software/openmesh/
            lib--https://www.cgal.org/
            code--http://www.meshlab.net/
    book_pass
        online--LearningOpenGL 
        slides--tud_cg1 
            CGI_01_Intro.pdf
                q- Main Areas of CG?
                    Modelling Rendering Animation
                q- Most important discrete surface representations?/ how can we def. a surface?
                    implicit surfaces
                    point set surfaces
                    polygonal meshes
                    subdivision surfaces
                    to NURBS 
                3D models can be described volumetrically or through their boundary surfaces
                q- what is Appearance Modelling
                    example: Analytic appearance models under Lambertian reflectance
                    condsidering the Reflectance properties of surfaces
                q- what is Physical Modelling
                    Physics simulation is based on mass, inertia tensor, friction, elasticity
                    Often the physical material properties are assumed constant
                q- what is Geometric modelling
                    use discrete surface representations to model an object in real word 
                    or volumetrically
                q- what kinds of modeling are there.
                    Geometric modelling
                    Appearance Modelling
                    Physical Modelling
                q- what kind of rendering methods are there?
                q- what is Global Illumination (?CG3
                    use or simulate Rendering Equation (RE)
                    typical methods are: raytracing, path tracing, radiosity, metropolis light transport
                q- what is Real-time Rendering
                    Simplify light transport
                q- do you know Non-Photo Realistic Rendering? what are typicall methods to achieve this?
                    Artisitic and Stylized Rendering of 3D geometry
                    stippling, hatching, toon shading, shing
                q- what is Keyframe Animation
                    Update model representation on keyframes
                    Define interpolation functions in between
                q- how many animation techs are there? as you know 
                    Keyframe Animation
                    Character Animation
                        Define skeleton, fit into surface mesh and bind mesh vertices to bones
                        Map skeleton animation for example from motion capture data to mesh
                    Physically Based Simulation
                        Model physical properties of objects
                        Solve differential equations of system
                        Detect and handle contacts &collisions
                h- typicall output of a graphics prog.:
                    Holographic Display
                    VR-Glasses
                    3D printer
                    Geometry Processing
                we work with 2D, 3D and 4D vectors, they can represent different entities:
                    Directions Positions
                    Planes
                    Colors
                    Normals
                q- what is Homogeneous Representation
                    allow a unified representation for positions and directions, we add a w-component:
                q- how to transform to Homogeneous Representation? and how to transform back?
                    Use w-clip to get back to standard representation
                q- illu. the following operations:
                    Sum, Difference
                    Scalar Multiplication
                    Component-wise Multiplication
                    color filtering
                    Dot Product
                    Cross Product
                    Triple Product
                q- The signed volume of the tetrahedron (dashed black lines in figure) can be computed from? op20
                    dashed black lines in figure
                h- Many people on the internet seem to believe: OpenGL uses a right-handed coordinate system and DirectX uses a left-handed coordinate system
                    This is wro
                Some libraries and engines have a fixed handedness
                h- Vector algebra is not affected by handedness.
                h- Both APIs let you choose handedness arbitrarily
                Operations in Affine Space
                set operation on objects
                affine combination
                q- explain the following concepts 
                    injective
                    surjective
                    bijective
                q- How to read a polar plot 
                    connect a straight line from this point to the origin
                q- what kinds of Polynomial Base do you know, how can be used?
                    monom basis
                    Bernstein basis
                    define, simulate a curve, for surface re construiction or repare...
                h- Different basis functions can be used to define the same function.
                q- what is Parametric Curves/ mathematical def.? 
                    define a mapping from one real valued scalar to a vector, for example a point op27 illu.
                q- what is the mathematical rep. of the following ?
                    > Parametric Surface
                        map a 2D space to a 3D surface
                        can be given in analytic form
                        q- how to compute a vector in normal direction on the surface? 
                            can be computed by building 
                            the cross product of the tangential vectors (through partial derivation)
                            The length of this vector equals the area spanned by the two tangential vectors
                    > Parameterization and Embedding
                        embedding
                            q- should be injective? surjective? for unique mapping of color onto surface
                    > Implicit curves / surfaces 
                        defined as zero set from 2D / 3D space to a scalar
                        q- what is zero set? 
                        The mapping can be again of arbitrary form
                        https://mathworld.wolfram.com/BatmanCurve.html
                        q- do you know Batman Curve
                    > Transformations
                        q- the mathmatical representation of Transformations? 
                    > BRDF
                        q- mathematical expression of BRDF? from what space to what 
                        op32
                    > Derivatives
                        some basic calcu. with Derivatives op33 
                    > barycentric
                        q- math. calcu.
                    > Affine Interpolation 	
                        q- math. calcu.
                    > Barycentric Coordinates in 3D
                        q- math. calcu.
                        If we work in 3D
                            q- coordinates? can be computed from cross product vectors
                            q- The sign? can be computed with 
                            q- absolute value?
                    > De Casteljau algorithm
                        q- math. calcu.
                    > bilinear
                        q- math. calcu.
                    > trilinear
                        q- math. calcu.
                q- give am example how interpolation be used?
                    compute embedding on mesh vertices by adding uvcoordinates
                    extend over each triangle by barycentric interpolation
                    interpolation
                Basis Transformation 
                q- what about the math calcu. use a different basis in matrix form? 
                    the model transform from coordinate system ?? to ?
                    represent linear transforms in ??-d
                    homogeneous matrix
                q- what is affine transforms op40 
                    transform with homogeneous matrix
                q- examples for(int i=0;i<n;i) linear transforms?
                    Scaling
                    Translation
                    Rotation
                    Shear
                q- Two different usages for the transformation matrix
                    Model vs. System Transform
                q- three components of a transform matrix?
                    Perspective Transforms
                    linear transform
                    translation
                h- Perspective divide fails for points with w = 0? y
                q- Illustration of perspective transformation
                q- what is Composite Transforms
                q- transformation matrix for transformation from frame i to frame i+1 is constructed relative to? 
                    coordinate frame i
                Rost et al.: OpenGL Shading Language
                Botsch et al.: Polygonal Mesh Processing
                Transactions on Visualization and Computer Graphics
                Transactions on Graphics
            CGI_02_OpenGL.pdf
                +
                    toread-   
                * q- Rendering Pipeline for the following cases?
                    Games Architecture
                        CPU and Graphics card arefully 
                        "occupied"
                    Application Architecture
                        CPU and Graphics card work only when necessary
                        "wait for nextevent"
                    Threaded Architecture
                        All parts are independent and workas fast as possible. Synchronization necessary.
                        "independent"
                q- mark the part of Main Loop
                q- what is Retained Mode? how it was used?
                    the graphics library, instead of the application (user code), 
                    retain the complete object model of the rendering primitives to be rendered.
                    Historically, retained mode has been the dominant style in GUI libraries
                q- Windows Presentation Foundation(WPF)是?
                    retained-mode API.
                编写 OpenGL 库的人（通常是显卡的生产商）自行决定
                q- 早期的 OpenGL （3.2 版本以前）使用的是？
                    立即渲染模式（即固定渲染管线）
                q- opengl三种模式？style of API design in graphics libraries?
                    保留模式
                        图形库把场景转换成为一系列的画图命令
                    立即渲染模式(Immediate mode)
                        帧与帧之间，图形卡不存储场景模型，而是由程序控制场景变化。
                        immediate-mode API灵活性高，可以针对场景进行优化。
                        一个immediate-mode API是过程式的。每次更新一个帧，程序直接发出画图命令
                    核心模式(Core-profile)
                        当使用 OpenGL （3.3 版本开始）的核心模式时，OpenGL 迫使开发者使用现代的函数；
                        当开发者试图使用一个已废弃的函数时，OpenGL 会抛出一个错误并终止绘图
                h- OpenGL 自身是一个巨大的状态机
                    一系列的变量描述 OpenGL 此刻应当如何运行；OpenGL 的状态通常被称为 OpenGL 上下文(Context)。
                q- 使用一些什么来改变上下文 ?
                    状态设置函数(State-changing Function) 
                越往后发展，可编程管线肯定是大势所趋
                从现在开始写程序就要养成使用新特性、采用可编程管线技术的好习惯
                q- 随着OpenGL状态和固定管线模式的移除，具体体现？
                    我们不在用任何glEnable函数调用，而且也不会有glVertex、glColor等函数调用
                q- 可编程管线的优势？
                    我们可以采用VBO，或者是在OpenGL3以上版本引入的新的特性，叫做VAO
                    VAO，是这样一种方式：把对象信息直接存储在图形卡中，而不是在当我们需要的时候传输到图形卡
                    把顶点数据存储在数组中，然后放进VBO，最后在VAO中存储相关的状态
                q- 使用opengl 4.3新特性？
                    的compute shader实现通用计算
                q- what is the Data Flow looks like? op5
                    can also be explained by pipeline
                q- what are Primitives?
                    Triangles, Lines, or Points
                    Vertices with attributes (e.g. positions)
                    t- try out render the primitives! look up how imp. in cgv and other places! 
                Provided by graphics vendor. Does most of the work, prepares commands for kernel-mode driver
                OpenGL Runtime
                h- New GPU features are added through extensions
                q- what kinds of extentions are there? 
                    ARB, EXT, NV, ATI, …)
                    toread- 
                q- OpenGL extensions must be loaded dynamically at runtime? y
                Extensions fall into 3 broad categories: 
                    vendor-specific, generic, and ARB-approved
                    with a prefix, specifying what type it is.
                    GL_EXT are generic extensions
                h- Sets of extensions are selected to define new versions 
                    new versions
                    can be viewed by OpenGL Extensions Viewer
                q- to see extension, wrapper library like glew necessary? y, how? op07 
                    glUseProgram
                    GLEW_VERSION_4_1
                    #include <GL/glew.h>
                        replaces GL/gl.h include
                    t- try out 
                q- do we need GL/gl.h now? why not use it? 
                q- what kind of OpenGL context & window are there? 
                    freeglut:
                        glutInit
                        glutCreateWindow
                        callback functions supported 
                h- The context stores all OpenGL states
                    These states can be modified with OpenGL functions.
                    library
                h- Starting with OpenGL 4.3 debugging with a callback function
                q- Shader debugging can be done with? x2 
                    NVIDIA Nsight through Visual Studio Integration
                        Working directory of project not supported
                    platform independent Glsl Debugger
                    t- try out 
                q- OpenGL 3.3 Pipeline
                    data to GPU memory.
                    q- Framebuffer comprises?
                        [mutliple] rgb[a] colors
                        depth, stencil
                    q- framebuffer is quite important, its output is? 
                        pixel val. 
                    memory
                    pixel data
                    Most processing is done in parallel
                    * q- what is the Input/Output of vertex shader, geometry shader? rasterizer?
                    toread- 
                    * imp. beacause macos supports only up to gl3.3 
                fragment shader
                q- what are fragment operations?
                    depth and stencil test, blending
                q- what is the diff. bet. Clipping and Culling?
                    Culling: Removes entire primitives based on winding order.
                    Clipping: Cuts primitives at planes (e.g. view frustum)
                q- what are holded in vertexbuffer memory? 
                    positions, normals, colors, texture coordinates...
                q- what is the func. of rasterizer? 
                    gen. number of frag. with attributes linearly interpolated(in world coordi.)
                q- what does Depth Buffer Algorithm do? 
                    Per-fragment test
                rasterizer
                    toread- 
                q- what is the workflow from Model to Window Coordinates 
                    ,with Homogenuous Transformations?
                q- We use column vectors? what is that?
                    Other libraries use row vectors
                *q- are we using column vectors or row vectors in GLSL? 
                    In GLSL (the shader language of OpenGL), vectors are i
                    nterpreted as column vectors if multiplied on the right side of a matrix
                    and as row vectors if multiplied on the left side.
                    toread- 
                q- OpenGL expects a column-major layout?
                    ??11 ??21 ??31 ??12 ??22 … ??33
                Other libraries use a row-major layout:
                q- Starting with which version of opengl a core profile has been introduced?
                    OpenGL 2.0
                q- the viewing functionality has become deprecated? y
                q- what is OpenGL Viewing 
                q- The pure header library glm re-implements all of the deprecated functionality? y 
                q- how can we use deprecated functionality?
                glm::lookAt
                h- The glViewport command is not deprecated
                transformation from world to eye coordinates is called 
                    the view transformation
                transformation from object to world coordinates is called 
                    model transformation
                q- what is view transformation? model transformation? op19 Projective Transform?
                    Define view frustum from z-distance
                    adjust znear and zfar based on scene extent
                q- View and projection matrix are typically computed in? and what about Model transformation?
                    resize callback
                    in display callback
                Viewing Implementation
                q- all kinds of transforms? what is the meaning? 
                h- rasterizer linearly interpolated in world coordinates
                p- op24 where does shader codes store? how is send to gpu?
                --- prog. related:
                q- how To create objects?
                    we use glGen*():
                q- how can we upload the data to the buffer bound to the slot
                    glBufferData
                q- how can we Mapping Attributes to Buffer Data? x2 
                    set uniform variables
                    setting their position in glsl 
                    query them by name
                q- Fast Walk-Through Pipeline Programming to show a Triangle, how can we render a triangle? 
                    creating a VAO and bind it
                    Building Shader Programs
                q- which programmable parts are there in the pipeline?
                they defines data processing? y
                q- where does Shaders need to be compiled & linked?
                    form executable program(cpu side)
                q- OpenGL implementation provides compiler and linker? y
                q- which two shaders mush be imp.? 
                    other shaders are optional
                Output of previous shader defines input of next shader
                Rasterizer interpolates!
                q- how can we output the Position information in vertex shader?
                    assignment to the variable gl_Position
                q- Further optional outputs for vertex shader?
                    with default values are gl_PointSize and gl_ClipDistance[]
                    Further optional outputs
                q- how can we output the color information in vertex shader?
                    assignment to the variable gl_FragColor
                reads shaders from file, builds programs and shows errors
                for loading shader codes, typically, a helper function is provided
                q- where can you ref. the shader lan spec.? 
                    https://www.khronos.org/files/opengl-quick-reference-card.pdf
                    toread- 
                #version 150 [compatibility]
                shader lan. is like C plus version and extension control
                q- what is Qualifiers?
                    represents data flow 
                    uniform … constant over processed primitive / buffer
                q- how todo affine combination in shader lan.? 
                    mix(x0,x1,?) … 
                noise{1-4}(x) …returns noise values
                Derivatives (fragment language)
                q- 2 ways to pass var. to gpu? x2 
                    handles vertex shader inputs and 
                        uniform variables through indices
                        layout(location = 0) in vec4 vPosition;
                    queried from program after successful linkage
                        glGetAttribLocation(program, “name”);
                tesselation control
                q- whats new in OpenGL Pipeline 4.0
                    compute shaders are introduced to allow for 
                    simple integration of general processing 
                    toread- 
                tessellation shaders.
                q- improtant gl versions:OpenGL 4.0,OpenGL 3.2, OpenGL 2.0 
                    is included in WebGL.
                The GLSL shader language is a mixture of C and C++ 
                shaders have special support for vector calculus
                q- how to steer the rendering pipeline.
                Applications connect to shader programs
            CGI_03_Geometry.pdf
            CGI_04_Lighting.pdf
            CGI_05_Texturing.pdf
            CGI_06_Surfaces.pdf
            CGI_07_Meshes.pdf
            CGI_08_Halfedge.pdf
            CGI_09_Mesh-Processing.pdf
            CGI_10_AccelDS.pdf
            CGI_11_Grids-and-Hierarchies.pdf
            CGI_12_Spatial-Queries.pdf
            CGI_13_Optimization-I.pdf
            CGI_14_Advanced-Techniques.pdf
        slides--tud_cg2 
            CG2_SS19_00_Intro.pdf
            CG2_SS19_01_Implicit_Surfaces.pdf
                Advanced Modelling
                3D Scanning
                calibration
                articulated objects
                inverse kinematics
                rigging motion capturing skinning
                one joint consultation before first exams
                Implicit Surfaces
                Tao Ju, Frank Losasso, Scott Schaefer and Joe Warren, Dual Contouring on Hermite Data, Proceedings of ACM SIGGRAPH, 2002
                https://www.cse.wustl.edu/~taoju/
                &t addi. read materials 
                Robust Optimization for Topological Surface Reconstruction
                continuous function
                splits
                into three sets
                &q which three?
                interior
                implicit surface
                exterior
                &q math def. og implicit surface 
                &
                An implicit function ?? is called regular, iff 
                where ?? ?? = 0 the gradient ?????? ?? does not vanish.
                manifold an
                regular
                finite volume
                an outer region of unbounded volume
                Implicit Function Theorem
                &?whatisImplicit Function Theorem?
                function assumes an arbitrary value ?
                level set functions
                Example
                Numeric Gradients Instable
                analytic gradient computation
                &q which is better? why not use num. ? unstable! 
                &q how comes unstable? what is the effect? math? op08
                &t try it out! draw a heart! to test numm. unstable property! and better soluton than analytical! 
                Gradient Computation
                BlobTree (Wyvill et al. 1998)
                combine several subtrees with boolean set operations like in a CSG 
                &t addi. paper 
                Advantages of Implicit Representation
                easy to define closed objects
                closed objects
                just in time tessellation simplifies modelling
                CSG
                space deformation
                as algebraic distance
                simple support for skeleton based shape representations
                skeleton based shape representations
                direct raytracing by searching for zero crossings
                &q advantages ad dis. op11 
                Primitives
                &q what Primitives are there? x4 
                distance surfaces
                algebraic surfaces
                define function as polynomial in x, y, and z of arbitrary degree
                &
                basis on lattice
                as scalar coefficients to basis
                radial basis
                radially symmetric basis functions around point samples
                Manhattan distance
                Euclidean distance
                Minkowski distance
                ?-norm 
                Chebyshev distance
                &q what kind of distance do you know? op13 
                unit spheres for different p-norms
                &
                The shape of a superquadric remains the same also without taking the p2 -th root,
                significantly simplifies the gradient computation
                Superquadrics
                Primitives
                Superquadrics
                &q Superquadrics is an other imp. primitive! 
                &t imp. this primitive! 
                Signed Distance Functions
                reproduce the primitive or a one sided offset surface
                plane
                cube
                Euclidean distance
                Chebyshev distance
                &q hwo can we define a cube in implicit surface construction? op16 
                Primitives �C Quadric Examples
                cone
                cylinder
                parabolic
                hyperbolic
                hyperboloids
                elliptic
                hyperbolic
                paraboloids
                &q their math expression 
                Quadrics are algebraic surfaces of maximum degree two
                with a symmetric homogeneous matrix
                Any quadric can be thought of as a perspective transformation of a sphere
                Perspective transformations can change the topology of the sphere
                and cut it open or even onto several parts
                perspective transformation
                blobs or meta balls are motivated by atoms forming molecules and the corresponding electromagnetic potential

                electromagnetic potential
                define a potential function decreasing with distance to the atom
                &q the formula! 
                implicit surface can be defined:
                potential function
                &t imp. the metaball! 
                &t record the merging process! 
                Tessellation
                Marching Cubes
                Ambiguities
                Ambiguous cases: 3, 6, 7, 10, 12, 13
                3, 6, 7, 10, 12, 13
                where the 2D ambiguity arises on one or more faces
                choose a higher resolution grid
                dual contouring
                MC versus DC
                &q algos! &t imp. of those two! 
                &q compare those two! 
                Dual Contouring
                marching cubes
                cuts sharp features short

                circumvents this
                edge plane intersection
                compute one point per cell
                constructing for each edge a plane through the edge point
                If a cell has more than three edge planes
                solve a least squares problem with reference point to avoid degeneration
                avoid degeneration
                DC Algorithm
                If a cell has more than three edge planes
                &q why we should take care when If a cell has more than three
                & edges?
                edge plane qem Q
                &q does DC algo use qem ds? y 
                the function of the translated circle is
                Manipulation
                Space Warping
                Function Value Mappings
                affine and projective transformations
                non linear deformations
                maps each point from warped to unwarped space.
                Function Value Mappings
                define a combined implicit surface with the function
                combined
                CSG & blending of surfaces
                g of surfaces ? a
                &q what is the diff. bet. space wa. and func. value mapping? what are they used typically 
                combined implicit surface with the function
                &h func. val. mapping is about its self --> combine several func. together 
                &
                warping function
                Warped implicit:
                Gradient of warped implicit
                Mapped implicit
                Gradient of mapped implicit
                &q calcu. derive formulas for those two cases for simple vec.! 
                Manipulation �C Linear Transformations
                A corresponding warp function can be implemented with the inverse of the matrix
                The inverse matrix is just the Jacobian of the warp

                Example 2: Shear
                &q write the implicit surface func. for given transformation M -- linear model transformation 
                &h op36 
                Manipulation �C Non-Linear Examples
                taper
                twist
                bend
                &q what non-linear transformations do you know? 
                Function Value Mappings
                compute the gradient
                Example Derivative Computation
                &q what is the gradient calcu. from FVM? op38 
                Non-Linear Examples
                &t imp. Non-Linear Examples
                &q derive formulas for two cases, and drivatives formulas! 
                Spatial Blending
                &t code for Spatial Blending
                get two levelset surfaces on both sides
                The gradient computes to
                &q formulas for levelset and outline mapping &t try!! 
                The min and max operations used for union and intersection of implicit surfaces are not smooth at the intersection of the surfaces.
                not smooth 
                For blending we are looking for smoother function value mappings
                behave in the same way as min and max
                Other Minkowski norms can be used to reproduce different blending profiles.

                More than two implicit surfaces can be easily incorporated to the blending operators.

                Union & Intersection
                Signed Distance Functions
                Smooth Union & Intersection
                Spherical Blend �C Union 
                Super-Elliptic Blend 
                &t imp. 
                Bulging Artefacts
                the blended union of boxes still does not work
                one can correct the radii of influence depending on the angle ? between the gradients
                &q hwo can we do correction? why also not work sometimes? op47
                Skeleton Based Implicit Surfaces
                A skeleton can be 1d, 2d or 3d.

                Distance Surfaces
                Convolution
                generates sharp edges in concave regions
                but generates bulging artefacts
                &q compare distance surface and convolution surface! op49 
                The field function is defined as convolution
                &q func.? 
                Potential functions
                &q w Potential functions d u know?
                Gaussian
                Cauchy
                inverse powers of radius
                blended inverse
                Jin 2002
                McCormack 1998
                convolution is linear operator ? superposition
                one can handle a skeleton composed of primitives by integrating potential over each primitive and then summing the results
                each
                summing
                Circular Arc
                Convolution Surfaces �C Bulging
                Thick Skeletons
                bulges only arise when skeleton is narrower than filter.
                use weights and decrease weights at line intersections.
                X. Jin, C.-L. Tai, Analytical methods for polynomial weighted convolution surfaces with various kernels, C&G 2002
                &t addi. reading paper! 
                provide analytic solutions for large number of potential functions for the case of line segments
                ? introduce up to cubic weighting functions along segments with analytic solutions
            CG2_SS19_02_3D-Scanning.pdf
                3D Acquisition Techniques
                Calibration
                Projector Model and Calibration
                Camera Calibration
                Triangulation
                Structured Light Approaches
                Direct vs indirect illuminatio
                Robust Pixel Classification
                mechanical measurement of individual points
                tomographic
                precise laser triangulation measurement
                phase shift measurement

                volume visualization of MRI-Volume
                RGBD-Cameras
                affordable
                3D cameras from different manufacturers
                &
                &q what kind of 3d  acquisition techni. do u know? x3
                joint acquisition of color image and depth map with 30-90 fps
                infrared camera acquires object with projected pattern
                projector
                infrared camera
                RGB-camera
                Microsoft kinect
                &q wh
                &q for Microsoft kinect, which part do you know? how it has been constructed?
                Hardware architecture
                &q the Hardware architecture of kinect?
                Reconstruction algorithm computes depth map
                Stereo Acquisition
                system calibration and finding corresponding pixel locations
                3D Scanning with Structured Light
                projected patterns encode the projector column
                ray through the camera pixal is intersected with plane through the projector column.
                Camera Projection
                pinhole camera
                &q describe the pinhole camera model op12
                in the origin and the z-direction corresponding to the view direction 
                2D Projective Geometry
                map points on a plane with a homography to image plane

                world plane
                image plane
                ?line as homogeneous vector
                points and lines are dual:
                ?intersection of two lines
                homography
                homography is defined as a projective transformation 
                maps from the projective plane to the projective plane bijectively
                &q what is homoxxx ?
                4 corresponding points determine homography
                Estimation of Homography
                at least ?? = 4 correspondences are necessary
                (when mixing point and line correspondences, the case with 2 points & 2 lines is degenerate and does not work
                2 points & 2 lines
                &q can we use 2 points & 2 lines to estimate the homography? n degenerate case! 
                &q how many corresp. are needed when estimating homography?
                solved by the singular vector corresponding to the smallest singular value in the SVD.
                Homography relate 2 views
                &q Homography can relate 2 views in 2 ways? which two?
                planar scene homography between 2 views:
                pure rotation -> same pin hole:
                &q model this process with math calcu. op18
                &q what is the Geometric Camera Model, draw a graph to illu.!
                Geometric Camera Model
                &q explain the following:
                intrinsic calibration
                extrinsic calibration
                Extrinsic Parameters
                camera‘s position and orientation
                defined by a 3x3 dim rotation matrix and a 3D translation vector.
                rotation and translation each have 3 degrees of freedom (dof) together these are 6 dof
                6 dof

                Intrinsic Parameters
                specify the internal geometry of the camera
                focal length
                principle point
                skew strength
                This results in 3 up to 5 intrinsic parameters
                Dissecting the Camera Matrix
                http://ksimek.github.io/2013/08/13/intrinsic
                &q the whole calcu. process with matrices! express it! op24
                Lens Distortion
                &
                &t simulate the length distorsion! 
                non-linear radial and tangential distortion model

                Non-linear Lens Distortion
                &
                &q  in such a pipeline, where should we add this Non-linear Lens Distortion process?op26
                non-linear radial and tangential distortion model

                &q the math. express of non-linear radial
                &and tangential distortion model
                &q ?
                vector field plot tool by Kevin Mehall (©2010)
                vector field plot tool 
                &t code a vector field plot tool 
                Camera Calibration by Zhang
                &q the process of 
                chessboard corners
                chessboard pattern

                estimate intrinsic and extrinsic parameters
                including lens distortion

                &t calibratino with Zhang method with opencv ! 
                PROJECTOR MODEL AND CALIBRATION
                &h here is an other better approach -- stru. light mode! not camera calibration!
                Projector Model
                Estimate Local Homographies
                Fix camera and projector intrinsics and use world
                Optimize all intrinsic and extrinsic parameters to minimize the total re-projection error
                &h no , here projector is used with zhangs method, not stru. light! 
                camera and projector can be modeled with pinhole extended by radial and tangential lens distortion
                intrinsic camera parameters can be determined by acquisition of chessboard in 3 and more poses 
                iterative non-linear optimization is performed with parameters estimated from linear model as initial guess
                projector can be calibrated in the same way by projecting gray code images for projector-camera pixel correspondences.
                Zhang: A Flexible New Technique for Camera Calibration, TechRep from 1998 and TPAMI 22(11) 2000

                &t paper! 
                Standard Setup
                Uses one camera and one projector

                Calibrate projector camera system, optionally rectify
                Project structured light patterns from projector and acquire images with camera
                synchronized
                Reconstruct points through triangulation
                Uses one camera and one projector
                &q the problem when using Uses one camera and one
                &projector
                & ?
                Only points seen from camera AND projector can be reconstructed
                indirect lighting and highlights can cause problems
                &q how can we solve those problem? op46
                More Cameras
                avoid problems with highlights
                Highspeed Setups
                In dynamic setting one can use synchronized high speed projector and camera
                short illumination time
                partially unsynchronized systems where the projector generates

                STRUCTURED LIGHT APPROACHES
                Line Shift Approach
                &q math behind Line Shift Approach?
                n patterns necessary, where n is number of projector columns
                Gray Code Pattern Sequence
                Binary and Gray Code
                &q explain the approach with Binary and Gray Code! op55
                &t try them! 
                Phase Shift Approach
                Phase Shift Discussion
                Vorteil
                fast unabhängig von der Objekttextur und der Schärfe der Aufnahme
                Debruijn Sequenzen I
                kodierte Kantenübergänge [Zhang 2002]
                &h zhangs method used stru. light! 
                https://en.wikipedia.org/wiki/De_Bruijn_sequence
                &t imp. this, show the squ. with vis. building block
                s a cyclic sequence in which every possible length-n string on A occurs exactly once as a substring (i.e., as a contiguous subsequence).
                De Bruijn graph
                Each De Bruijn graph is Eulerian and Hamiltonian.
                The Euler cycles and Hamiltonian cycles of these graphs
                https://en.wikipedia.org/wiki/De_Bruijn_graph
                &t addi. effort 
                Projektionsmuster
                Microsoft Kinect 
                Farbkamera
                Tiefenmessprinzip
                zwei Vermutungen
                Stereoblockmatching über Punktmuste
                Tiefe aus Unschärfe mit astigmatischen Linsen
                Hybrid: Graycode + Lineshift
                Hybrid: Graycode + Phasenshift
                Erweiterung von Debruijn auf 2D
                Ansätze
                &
                &q what alterbnative stru. light pattern do you know? op62 
                _inv_30min
                SEPARATION OF DIRECT AND INDIRECT ILLUMINATION
                S.K. Nayar, G. Krishnan, M. D. Grossberg, R. Raskar, Fast Separation of Direct and Global Components of a Scene using High Frequency Illumination, ACM Trans. on Graphics (also Proc. of ACM SIGGRAPH), 2006.
                &
                &t addi effort paper! 
                directly reflected light
                indirectly reflected light
                SEPARATION
                in structured light scanning only the direct illumination is of interest
                Indirect
                &q do we want Indirect illumination in  structured light
                structured light scanning
                &scanningq?
                &q no, we want direct light only. so, we can probab. extract direct light from images! how? 
                points the luminance due to
                diffuse or specular interreflections (B)
                subsurface scattering (C)
                transluceny (E), or
                volumetric scattering (F)

                scene points in shadow (G) should be ignored
                subsurface scattering 
                &q given an image, say, where is subsurface scattering !
                Idea of Separation
                &
                &q how can we saparate direct light and indirect light from the scene? we can use more than one pic. to do this! 
                project high frequency pattern with 50% pixels on and its negative, such that each scene point is once illuminated and once not illuminated

                once illuminated and once not illuminated
                measure minimum and maximum luminance
                projector sharpness is not perfect and varies over acquisition volume
                do not use maximum frequency (i.e. 4x4 up to 6x6 squares)
                &q what problems can arise when using such a strategy? how can we overcome them? x2 
                &h op67 
                Extension to Phase Shift
                project an off pattern to determine Lamb directly
                indirect component
                &q can we measure the  indirect component directly? op68 
                mirror sphere yields artefacts as smoothness assumption is violated
                &q why can not saparate light correctly for mirror sphere? op71 
                projector shadow
                &q where is projector shadow? in this pic? direct and indierct illu.? op72
                Y. Xu, D. Aliaga: Robust pixel classification for 3D modeling with structured light. Graphics Interface 2007: 233-240

                ROBUST PIXEL CLASSIFICATION
                Dual Pattern Rules and Comparison
                if ???? is less than threshold ??, scene point is in projector shadow
                direct-indirect light separation is done as in previous
                &q what is the idea used? what is the input for such a cllasification? op73
                add the constraint that a pixel must classify oppositely in the two patterns
                &q how can we make a classification more robust? op74 typically in binary classification! 
                &t imp. the classification technique! 
                camera-projector setup has problems with highlights which can be eliminated by adding a second camera
                gray codes, phase shift and their combinations are most prominent methods

                to reduce the number of patterns for fast scanning
                encode projector column in spatial neighborhood
                robust binary classification
                uses global indirect light component to derive classification intervals
                we did not cover brightness and color calibration. Both projector and camera do not map them linearly!!!
                brightness and color calibration
                &t further reading and coding, how can we calibrate brightness and color? op77
                https://gfx.cs.princeton.edu/pubs/Hall-Holt_2001_SBC/realtimerange.pdf
                &t paper! to read! 
            CG2_SS19_03_3D-Scan-Processing.pdf
                3D Scan Processing
                Kinect fusion
                Real-time 3D Reconstruction and Interaction Using a Moving Depth Camera
                Moving
                https://www.microsoft.com/en-us/research/project/kinectfusion-project-page/?from=http%3A%2F%2Fresearch.microsoft.com%2Fen-us%2Fprojects%2Fsurfacerecon%2F#!publications
                &t publication about kinect fusion! 
                More Recent Fusion Approach
                http://graphics.stanford.edu/projects/bundlefusion
                Large-Scale Direct Monocular SLAM
                http://vision.in.tum.de/research/vslam/lsdslam
                3D Scan Processing 
                ? local features
                matching
                registration
                bring 3D scans in same coordinate system
                estimate pose of camera (camera localization )
                fusion
                merge partial scans
                reconstruction
                estimate globally consistent surface
                &q explain those key words 
                local features
                classification (outlier, boundary, sharp edge, corner, smooth) ? tangent space or surface normal ? curvatures and higher moments ? histogram descriptors

                Riemann-Graph: f�r jeden Punkt die Kanten zu den k N�chsten Nachbarn (typisches k?[6,20])
                &q what is riemann graph
                Berechnung der Delaunay-Tetrahedrisierung �ber Punkteinf�gen oder konvexe H�lle. Robuste und schnelle Implementierungen in CGAL oder qhull.

                http://www.qhull.org/
                &t code! try out! 
                &t and understand the code! 
                &
                Connect to all neighbors within a sphere of fixed radius estimated from sampling density
                Outlier detection
                Estimation of sampling density
                &q how can we do this?
                most edges of an outlier point are outgoing and only few ingoing
                thresholding
                sampling density ? is defined as the minimum radius
                a circle in tangential space
                &q how those cpt are defined?
                Sampling is the process of converting a signal (e.g., a function of continuous time or space) into a numeric sequence
                analog-to-digital conversion
                or simply digitizing
                at least one surface sample is found
                Tangent Space Estimation
                (CG1)
                &q how did we slved tangent space estimation? in cg1?
                & by modeling it into a LLS problem
                &q which difficulties can be found in surface reconstruction? x5 
                noise
                corner
                sharp corner
                close sheets
                outlier
                C0 -discontinuity
                C1 -discontinuity
                Selection of robust norms
                &q explain those 
                Iterated Re-weightes Least Squares
                IRLS suitable for convex norms like the p-norm
                re-compute weights
                combine IRLS with localization weighting
                IRLS
                &q cpt of IRLS
                &q for what kind of problem is IRLS suitble for? op16
                homework: combine IRLS with localization weighting
                &t imp. homework: combine IRLS with localization weighting for plane fitting problem!! 
                A good family of robust norms is the Minkowski norm 
                choice of localization and noise scales is important:
                bilateral weights
                Problems of weighted Tanget Space Fit
                &q what are Problems of weighted Tanget Space Fit? op14
                To support sharp creases and corners, a second weight ???? is multiplied to the localization weight:
                Two choices have been proposed:
                The bilateral weights depend on the to be estimated normals and couple the local optimzation problems into a global, nonlinear optimization problem
                &h here, bilateral weighting actuall means : use a second weight! 
                compute bilateral weights
                fit tangential planes with new weights
                iterate
                &h for bilateral weights, typically we need to compute iter.
                normal distance

                plane distance ???? ?? = exp - ????? ?
                [Fleishman03]
                &t paper! 
                We can fit a height field ?? ( ?? , ?? ) in a polynomial description
                to the neighboring points and use the tailor series
                compute the curvature properties
                &q hwo can we compute curvature properties? op21 
                &h fit a  polonomial first 
                Local Polynomial Fit
                monoms are the simplest basis and can be built for increasing degrees
                a linear combination of the basis functions
                can be transformed to vector notation:

                compare CG1 script on surface analysis
                describe larger neighborhood of point with a histogram over angle ?? and height ?
                Spin Images
                &q what is Spin Images
                this compute tangent space and local coordinate frame
                compute histogram on grid vertices 
                extrapolation
                bilinear interpolation 
                Spin images can well distinguish different local surface types
                They are used frequently in shape matching approaches
                &q how spin images can be used in mesh processing approach? op25
                shape matching approaches
                &q what other approaches do you know to shape
                &matching approachesq?
                &t imp. a shape matching sys.!
                make matching approaches robust against choice of x -axis
                &q how can we ensure that this matching process is robust? op25
                [Johnson�97] � A. E. Johnson. Spin-Images: A Representation for 3-D Surface Matching. PhD thesis, Carnegie Mellon University, 1997.
                https://dl.acm.org/doi/pdf/10.5555/601671.601673
                https://dl.acm.org/doi/pdf/10.1145/882262.882368
                ? [Alexa�01] � M. Alexa, J. Behr, D. Cohen-Or, S. Fleishman, D. Levin, C. T. Silva. Point set surfaces. IEEE Visualization'01, acm.
                ? [Fleishman03] � S. Fleishman, I. Drori, D. Cohen-Or. Bilateral mesh denoising. SIGGRAPH�03, doi.
                ? [Jones03] � T. R. Jones, F. Durand, M. Desbrun. Noniterative, feature-preserving mesh smoothing. SIGGRAPH�03, doi

                Y. Lipman, D. Cohen-Or, D. Levin. 2006. Error bounds and optimal neighborhoods for MLS approximation. SGP '06, acm

                https://dl.acm.org/doi/pdf/10.1145/882262.882367
                &
                &t further reading paper!
                consistent normal orientation is precondition of several surface reconstruction techniques
                Poisson Reconstruction
                &h here normal refers to point normal or surface normal? 
                angent plane fitting does not give sign of normal
                sign defines outside direction which needs to be globally consistent
                position of 3D scanner defines outside direction, but
                information is often lost 
                &q can we preserve the ori. by recording cam. loc. somehow? 
                normal orientation problem
                &q what is the output of normal orientation problem?
                estimate one or several normals from additional knowledge
                build neighbor graph and propagate normal orientation along graph edges
                normal orientation
                &t after 3d scan, write a prog. to fix normal orientation 
                &t check normal orientation of a scanned 3d dataset point cloud! 
                initialization: estimate one or several normals per connected component from additional knowledge
                outside direction of convex hull)
                &h we may know nothing about the normal dir. of a given point cloud 
                &q how can we estimate a initial step? op31 
                build neighbor graph (i.e. Riemann graph with ?? = 16)

                weight each graph edge by unreliability measure
                define flip criterion
                propagate normal orientations from initialization over graph edges
                propagate orientation along minimal spanning tree
                minimal spanning tree
                setup global unreliability minimization problem and solve with approximate solver [Schertler16]
                &q how many solutions are there? x3+ op30 
                flip criteria and unreliability measures
                &h many possiblities exists 
                given initial orientations and a connected graph of edges with unreliability as cost
                MST
                can be computed with Kruskal�s algorithm in ??(?? log ??) for ?? edges and minimizes unreliability
                &q what is the time cost for computing a MST? op35 
                The idea is to add edges with increasing unreliability starting from least unreliable one 
                avoid cycles by tracing sets of connected graph vertices with union find data structure (compare CG1)
                Global Optimization
                &q hwo can we def. this global optimization problem? op37
                problem is NP-hard
                only semi-approximate solvers like QPBO (Quadratic Pseudo-Boolean Optimization) feasible
                Global Orientation Problem
                [Hoppe92] � H. Hoppe, T. DeRose, T. Duchamp, J. MCDonald, W. Stuetzle. Surface reconstruction from unorganized points. SIGGRAPH 1992. ? 
                [Xie03] � H. Xie, J. Wang, J. Hua, H. Qin, A. Kaufman. Piecewise C1 continuous surface reconstruction of noisy point clouds via local implicit quadric regression. IEEE Visualization 2003, ? 
                [K�nig09] � S. K�nig, S. Gumhold. Consistent Propagation of Normal Orientations in Point Clouds. VMV 2009 ? 
                [Schertler16] � N. Schertler, B. Savchynskyy, S. Gumhold. Towards Globally Optimal Normal Orientations for Large Point Clouds. CGF, doi:10.1111/cgf.12795


                sparse ICP 
                    ....
                SURFACE RECONSTRUCTION
            CG2_SS19_04_Rotations-and-Articulated_Objects.pdf
                Rotations & Articulated Objects
                Transformation matrices
                ? Besides the ï¿½realï¿½ dimension, an imaginary dimension extends
                the imaginary dimension are orthogonal
                Different equivalent notions exist to describe a point in the complex plane
                component form
                trigonometric form
                &q what is trigonometric form for representing complex numbers? op 6
                complex product is communitative:
                conjugation
                norm
                inverse
                zero crossings
                &q what is conjugation for complex numbers? 
                &q what is zero crossings
                
                
                &q Eulerï¿½s Formula [what is?] [how is used?] [why do we have to?] [which ones?] [the idea of?] [advantage or disad.?] [formula? proof?]
                proof is given by Taylor series expansions
                the trigonometric form of a complex number becomes
                &q trigonometric form [what is?] [how is used?] [why do we have to?] [which ones?] [the idea of?] [advantage or disad.?] [formula? proof?]
                2D Rotation with complex number
                &q how can we do 2D Rotation with complex number? rotate a complex number? 
                3D ROTATIONS
                &q how can we express a 3D ROTATIONS?
                &h x4 
                &q Properties of rotations in 3D [what is?] [how is used?] [why do we have to?] [which ones?] [the idea of?] [advantage or disad.?] [formula? proof?]
                retain the length of vectors
                Rotations form the special orthonormal group
                Forward Euler Angle
                A 3D rotation in the 321-convention of Euler angles as used in navigation for yaw, pitch, roll 
                can be computed from a given rotation matrix
                Inverse Euler Angles
                http://staff.city.ac.uk/~sbbh653/publications/euler.pdf
                &
                &t paper!
                321-convention
                &q what is 321-convention
                Euler angles as used in navigation for yaw, pitch, roll 
                &
                &q how euler angle is used? why we have to get it? from rotation matrix?
                &q how can we get euler angle from rotation matrix? compute with an algo 
                http://staff.city.ac.uk/~sbbh653/publications/euler.pdf
                Pseudo-Code taken from Gregory G. Slabaugh
                &t further reading 
                Rotation around Axis
                Every rotation can be described by an axis and an angle ?
                For every rotation exist two axis-angle combinations:

                Rotation around Axis
                &h we can describe a rotation with Rotation around Axis 
                &h sometimes it is more simpler to repres. rotation in such form 
                QUATERNIONS
                &q what is? how is used? the idea? adv. and disadv.?  QUATERNIONS
                Quaternion Definition
                comparison with complex number
                Quaternion
                &q how is Quaternion be defined?
                product table
                &q what is the product table used for Quaternion
                &h op17 
                &t rotations in 3D donï¿½t commute [imp.] [paper reading] [+further reading!]
                &q does rotations in 3D commute?
                &h def. is similar to orthogonal unit vectors
                http://3dgep.com/?p=1815
                &t imp. paperther reading 
                &
                &q what is conjugation, norm, ... of Quaternions? basic calcu.! 
                conjugation
                norm
                inverse
                unit quaternions
                scalar+vector-interpretation
                multiplication
                unit quaternions
                can be interpreted as rotation by a around 
                &q how can we  rotate a 3d-vector? op19 
                &t more on Quaternions! imp. paperther reading ! 
                efficient concatenation of rotations
                &q what is the main adv. of using Quaternions for calcu.? &h 
                efficient concatenation of rotations
                concatenation of rotation by ?? around ?? followed by rotation by ?? around ?
                &t formula? proof? 
                &t calcu.! this example! 
                concatenation of rotation by ?? around ?? followed by rotation by ?? around ?
                &
                &t calculate this example 
                &h op21 
                http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche52.html
                Conversions from and to matrix
                &q how can we convert from and to the form of rotation matrix? op22 
                &t imp. paperther reading 
                Double Cover of Rotations
                &q what is Double Cover of Rotations? what does it mean? 
                not unique
                Each rotation has two representations. We call this a double cover of the group of rotations
                The quaternions are also a double cover
                &t proof this !
                &t compare diff. representations! op 24 
                ARTICULATED OBJECTS
                Fabricating Articulated Characters using Skinned Meshes, Siggraph 2012
                http://the-4thworld.com/essentials.html
                &t imp. Paper Further reading 
                Skeletal Animation
                biped body tracking
                illustration of human skeleton
                https://en.wikipedia.org/wiki/Human_skeleton#Skull
                &q anatomy of a humna skel.! 
                leap motion hand skeleton
                &q anatomy of a hand op29 
                &h op28 
                facial animations

                hand tracking
                Kinematic Chain
                the last bone is also called end effector
                used for example for grabbing
                connect two bones and often have an own coordinate system
                bones and joints form a kinematic chain
                &q explain those cpt:
                bone/limb/link
                base
                end effector
                joints
                kinematic chain
                most basic joint types are revolute and prismatic joints 
                &q which types of joints do you know? x8 
                revolute and prismatic 
                per bone three coordinate systems are defined:
                input joint
                bone
                output joint
                joint coordinate systems are aligned with joint axis
                joint coordinate systems are aligned with joint axis
                Transformations are composed along kinematic chain

                kinematic chain
                &
                &q how can we express kinematic chain with list of transf.? op32 
                Basic Joint Types
                Revolute
                Universal
                prismatic
                Gimbal
                Spherical
                in-planar
                http://www.mathworks.de/de/help/physmod/sm/assembled-joints.html
                &t imp. Paper Further reading 
                Special Joint Types
                Cylindrical
                Bearing
                planar
                Telescoping
                Screw
                &q what kind of joints are there? what is their dof? 
                Coming from aironautics, the terms roll (x), pitch (y) and yaw (z) are commonly used
                Roll-Pitch-Yaw
                An arbitrary rotation is defined by 3 free parameters
                Navigation using gyroscopes
                313-Convention
                The first and third axis can become parallel, thus reducing one degree of freedom. This is called “gimbal lock”.
                gimbal lock
                &q explain the gimbal
                &lock
                Roll-Pitch-Yaw
                &q what is Roll-Pitch-Yaw?
                &
                kinematic chain (robot arm or path in skeleton) 
                relative transformations
                &q calcu. of the posi. of the end effector given a list of para. op36 
                Forward Kinematics
                Orientation for example given as Euler angles

                Skeleton
                a skeleton is a kinematic tree 
                &q how can we define skel. tree besed on kinematic chan? 
                with joints as nodes and bones along edges
                has a single root joint and several end effectors
                at each joint ?? a coordinate frame ???? is defined
                the rigid body transformation ??(??) ???? between frames
                &t write formulas and calculate this example 
                &h op36 
                rigid body transformation
                &h rigid body transformation contains translation and rotation
                representation of transformations
                &q hwo can we represent a transformation? x3 
                &q what is? how is used? the idea? adv. and disadv.? 
                Denavit-Hartenberg notation
                Using Euler angles
                Using quaternion
                has 7 parameters plus one normalization constraint
                Euler angles one has 6 parameters
                &q how many para. for each? 
                the skeleton tree can be linearized for example in a depth first traversal
                parents are always computed first
                &q why we use depth traversal here? to visit a skel.? 
                Denavit-Hartenberg notation
                &q what is the adv. of using a DH representation? can use fewer para. four
                &q what is the input and output of DH? 
                &h op41 
                https://www.youtube.com/watch?v=rA9tm0gTln8
                DH 360° Angle Computation
                &q why we should take care when calcu. DH 360ø Angle Computation?
                One needs to determine the sign of ???? from the sign of
                &q hwo can we determain the sign? op44 
                &t imp. and paper and further reading 
                ? [Spong] … Mark W. Spong, Seth Hutchinson, and M. Vidyasagar, Robot Dynamics and Control (2nd Edition), 2004, Chapter 3 – Forward Kinematics: DH Convention
                [Bächer] … Moritz Bächer, Bernd Bickel, Doug L. James, and Hanspeter Pfister. 2012. Fabricating articulated characters from skinned meshes. ACM Trans. Graph. 31, 4, Article 47 (July 2012), 9 pages. DOI: https://doi.org/10.1145/2185520.2185543
                https://dl.acm.org/doi/10.1145/2185520.2185543
            CG2_SS19_05_Skinning.pdf
                CHARACTER ANIMATION
                Rigging
                Animation
                Skinning
                &q explain those terms!
                map skeleton to mesh
                map pose from skeleton to mesh
                in reference pose
                map pose
                define new pose on skeleton
                for each bone describe influence on vertices by assigning weights
                build skeleton, align with mesh and adapt bone lengths
                morph targets
                Morph Target Animation
                &q what is? how is used? the idea? adv. and disadv.? 
                model a large number of localized deformations to provide different expressions of the mesh
                provide an animation parameter 
                Auto-Rigging
                &q how many Auto-Rigging methods are there? 
                Given several pose shapes of a character (from 3D scanner or animator)
                Physically-Based Approaches
                &q what is? how is used? the idea? adv. and disadv.? 
                Computational cost
                Large number of parameters to adapt for each animated individual
                Scanning
                Advantages
                Very realistic
                Disadvantages
                Needs scanning devices
                Need many examples
                Memory consumption
                https://doi.org/10.1111/cgf.12048
                http://www.youtube.com/watch?v=L4T4t2_qkDk
                &t imp. and paper and further reading 
                Geometric Approaches
                Linear blend skinning

                Dual quaternion skinning
                Geometric Approaches
                Advantages
                Simple & efficient
                Disadvantages
                Yields some artifacts
                http://www.youtube.com/watch?v=LUOJccOZfWQ
                &q how many skinning and rigging methods are there and what are theit adv. and disadvantages! 
                Keyframe based shape animation
                physically based animation
                design model / scene with physical parameters

                compute keyframe based shape animation from laws of physics
                from laws of physics
                character animation
                animate keyframe poses of skeleton
                attach vertices to bones 
                animation
                &q what kind of animation techs are there? x3 
                &t imp. two of them! 
                &t imp. and paper and further reading 
                &h op12 
                compute deformed surface model
                Storing a Skinned Mesh
                vertex weights
                skeleton joint
                mesh vertices in rest pose
                geometry
                connectivity
                attach vertices to bones (W)
                animate keyframe poses of skeleton (Pi )
                design skeleton S with bones
                &q the repres. illu. the animation process on op12 !
                skeleton is aligned with skin mesh in reference pose (?? = 0)
                &q what we get after rigging? op14 
                define vertex weights
                hand, fitting or IK
                &q hwo can we define a new pose? above 
                For each joint one can transform coordinates from the reference pose to the new pose with the transformations
                for each joint
                we have a transformation defined from the reference pose to the current frame
                A vertex is influenced by the ones where the weight is larger than zero
                &q a vertex is not affect by all the bones? y typically 
                &q how can skel. affect vertex on suface? simplest way? linear combination! 
                Linear vertex Blend Skinning
                &q write formulas and calculate this example 
                skeletal subspace deformation (SSD)
                linear vertex blending leads to artefacts due to loss of volume:
                &q what artifacets can arise using SSD method? op18 x2 
                elbow collapse
                Candy wrapper
                due to loss of volume:
                LBS artefacts
                &h ssd method is also called lbs 
                http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.107.8995&rep=rep1&type=pdf
                high dimensional animation space to be learned from examples
                all figures © Merry et al. 2006
                &t imp. and paper and further reading 
                Interpolation by affine combination
                &t write formulas and calculate this example 
                build curves over transformations, which can be used for camera animation
                To interpolate between two transformations ??? ?? ??0 and ??? ?? ??1 , one can first compute the relative transform
                Representing transformations by homogeneous matrices, concatenation corresponds to matrix product 
                add fractional parts ?
                &q the case of add fractional parts t? write formulas and calculate this example 
                &h op23 
                Another approach is to decompose
                into a product of transformations that can be split into fractional parts individually through parameters
                &t imp. and paper and further reading 
                Any homogeneous matrix can be written as product
                &p
                &h op23 
                Interpolation is only possible if no reflection ??? is present
                &p 
                But this only works for interpolation not for blending with more than two matrices and weights
                Affine combination
                &q Affine combination interpolation? 
                &q what kind of interpolations are there? which is intunitive one? affine + quaternoin !
                Quaternion Interpolation
                ? One can interpolate two unit quaternions q1 and q2 with the SLERP operation,
                In computer graphics, Slerp is shorthand for spherical linear interpolation
                &t imp. and paper and further reading 
                &q why we learn interpolation methods?? for blending, for skinning! 
                &q the diffculty is how can we model it and not gen. artifacts! 
                LOG MATRIX BLENDING
                Log Matrix Blending (Alexa 2002)
                Basic idea: the log function can be used to transform the product operation into a sum:
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                This means that ?? and ?? are split into infinitesimally small parts which are interwoven to a commutative result
                &t write formulas and calculate this example op29 
                If logarithms exist of ?? and ?? one can proof the identity
                Log Matrix Blending (Alexa 2002)
                Properties when applied to rigid body transformations
                result is always a valid rigid body transformation
                valid rigid body transformation
                interpolates between two rotations with uniform angular speed

                interpolation between two rotations is not necessarily along the shortest path
                &h we have to do some interpolation when blending?? 
                &p
                Discussion
                linear systems can be solved and SVD be performed in log space allowing for statistical analysis of motion
                Errors and Omissions in Marc Alexa’s “Linear Combination of Transformations”
                &t further reading 
                &t imp. and paper and further reading 
                repeated conversion to log space, averaging in log space and conversion back to quaternion space 
                Spherical Averages (Buss 2001)
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                SPHERICAL BLENDING
                has not been used in skinning
                Spherical Blend Skinning (Kavan 2005)
                &t imp. and paper and further reading 
                To avoid artefacts ensure that all dot products of the quaternions are positive
                SBS
                Spherical Blend Skinning (Kavan 2005)
                For cloth simulation we need some optimization approach
                &t cloth simulation ! 
                How to find a good rotation center ?? ?? ?
                &q How to find a good
                &rotation centerq 
                For revolute joints simply choose point on joint axis
                &t write formulas and calculate this example op37 
                Optimization
                Accompanying video for paper "Spherical Blend Skinning", I3D 2005.
                &t imp. and paper and further reading 
                Real-time Skeletal Skinning with Optimized Centers of Rotation
                SCREW MOTIONS & DUAL QUATERNION BLENDING
                DUAL QUATERNION BLENDING
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                &t imp. and paper and further reading 
                rigid body transformation include translations, rotations, reflections and their combinations.
                rigid body transformation include
                &q rigid body transformation include??
                proper rigid body transformations exclude all reflections and are also called roto-translations.
                A [proper] rigid body transformation can be represented as an orthonormal matrix ?? and a translation vector ?? ? :
                Screw Motions
                &q what is? how is used? the idea? adv. and disadv.? 
                Chasle‘s/Mozzi's/Cauchy's screw theorem
                Screw theorem
                Plücker Coordinates
                &q what is? how is used? the idea? adv. and disadv.? 
                resulting in 4 degrees of freedom
                proof
                &q proof this 
                an oriented line from ?? through ?? can be represented as a direction vector ?? = ?? - ?? and the moment vector ?? = ????? as 6D homogenous Plücker Coordinates
                6D homogenous Plücker Coordinates
                Plücker Coordinates Applications
                Line Geometry 
                test whether two lines{??: ??} and {??' : ??'} intersect in 3D:
                Compute common plane of intersecting lines
                Compute plane for line and point 
                Compute homogenous representation of line-line intersection point (no line may pass origin)

                &
                &q how can we do those? 
                &t imp. and paper and further reading 
                &t we can obtain from cgv imp. on its website!
                Further Applications in Ray-Tracing
                intersection
                &t some intersection calcu. with help of Plcker Coordinates!
                &t imp. and paper and further reading 
                accelerate ray intersection computations
                dual base
                similar to the complex
                but
                dual numbers 
                &q what is? how is used? the idea? adv. and disadv.? 
                transformation rule is implemented in the dual product:
                Dual Coordinates
                Dual Algebra und Dual Quaternions
                multiplication
                conjugation
                inverse
                square root
                dual quaternion
                conjugations
                norm
                inverse quaternion
                Unit Dual Quaternions
                &q why use dual number? 
                &h rotations can be rep. better! more intunitively! op46 
                &h the transfermation rule can be rep. in dual product op46 
                &t write formulas and calculate this example 
                &q dual algebra? write formulas and calculate this example ! 
                &q dual algebra is similar to complex algebra? y! 
                for unit dual quaternions dual and non dual part are orthogonal
                composition of rotation and translation is
                screw motion form of unit dual quaternion with dual angle ??? and dual axis vector ?? ? :
                &q hwo can we rep. scorew motion with dual quaterion? op49 
                &t an exampel calculation! op50 
                convert to dual quaternion:
                rearrange into
                convert skinning transformation to dual quaternions
                Dual quaternion Linear Blending
                (Kavan 2007/8)
                To avoid artefacts ensure that all dot products of the dual quaternions are positive
                For each vertex 
                for optimized computations and shader code see paper
                &t addi. imp. and paper and further reading 
                Properties
                always computes a valid rigid body transformation
                interpolates two rigid transformations along the shortest path
                very fast computation
                does not interpolate transformations with uniform speed
                Missing Property
                &q comparation of four blending methods! 
                &q adv. adn disadv. of dual quaternion? op53 
                Understanding Quaternions, http://3dgep.com/?p=1815

                Quaternion Demonstrator, https://graphics.stanford.edu/courses/cs348c-95-fall/software/quatdemo
                Convert from rotation matrix to quaternion, http://www.cg.info.hiroshima-cu.ac.jp/~miyazaki/knowledge/teche52.html
                Ben Kenwright: A Beginners Guide to Dual-Quaternions, http://wscg.zcu.cz/wscg2012/short/a29-full.pdf
                http://wscg.zcu.cz/wscg2012/short/a29-full.pdf
                TRANSFORMATION OF NORMALS
                blended transformations of all blending schemes cannot be used to transform vertex normals correctly
                &q  explain why we have to transform normals why it was not correct before by default? op56 
                Tangent and Normal transformation
                A vertex normal is transformed with the inverse transposed of the Jacobian
                Linear Blend Skinning Case
                &q how can we fix normal directions in diff. blending cases? 
                plus the deformable part
                due to the variation of weights over the skin mesh
                Computation of weight gradients
                Similar to vertex normal computation one computes the weight gradients first per triangle and then averages at vertices the gradients of adjacent triangles.

                can be computed from
                in a preprocessing step.

                Combining the formulas
                &q write formulas and calculate this example 
                &q how can we fix the normal problem? in one fomula! in the cese of LBS? op60 
                for DLB use dual quaternions to compute
                (LBS or DLB)
                &q for DLB, there is also normal problems? y 
                Transformation of Normals
                Accurate and Efficient Lighting for Skinned Models
                https://vimeo.com/85267396
                &t further reading imp. and paper and further reading 
                &
                http://shihaowu.net/
                https://igl.ethz.ch/people/
                https://igl.ethz.ch/publications/
                &t imp. and paper and further reading 
                Linear combination of transformations. In Proceedings of the 29th annual conference on Computer graphics and interactive techniques (SIGGRAPH '02). ACM, New York, NY, USA, 380-387. DOI=10.1145/566570.566592
                Ladislav Kavan and Jirí Žára. 2005. Spherical blend skinning: a realtime deformation of articulated models. In Proceedings of the 2005 symposium on Interactive 3D graphics and games (I3D '05). ACM, New York, NY, USA, 9-16. DOI=10.1145/1053427.1053429
                Bruce Merry, Patrick Marais , James Gain. 2006. Animation space: a truly linear framework for character animation. ACM Transactions on Graphics 25(4):1400-1423. http://pubs.cs.uct.ac.za/archive/00000373/
                Ladislav Kavan, Steven Collins, Jirí Žára, and Carol O'Sullivan. 2007. Skinning with dual quaternions. In Proceedings of the 2007 symposium on Interactive 3D graphics and games (I3D '07). ACM, New York, NY, USA, 39-46. DOI=10.1145/1230100.1230107 ? Marco Tarini, Daniele Panozzo, Olga Sorkine-Hornung, Accurate 
                http://vcg.isti.cnr.it/deformFactors/
                Downloadable Demo
                &t imp. and paper and further reading 
            CG2_SS19_06_Skeleton-Extraction.pdf
                Skeleton Extraction
                Medial Axis
                &q what is? how is used? the idea? adv. and disadv.? 
                &q the def. of Medial axis
                set of shape points with at least two closest points to shape boundary
                medial axis is very sensitive to small shape changes
                &t imp. and paper and further reading 
                Curve Skeletons
                &h we can obtain Curve Skeletons from medial axis, how? op3 algo!
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                Curve Skeleton Algorithms
                &q what kind of Curve Skeleton Algorithms are there? x3 op4 
                Thinning
                Distance field based
                discretize distance to shape boundary on voxel grid 
                extract ridge lines
                Geometric
                compute voronoi diagram 
                General field functions
                force fields and detection of local extrema
                Competing Fronts
                Sharf, Andrei et al. “Competing Fronts for Coarse-to-Fine Surface Reconstruction.” EG 2006
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                &t imp. and paper and further reading 
                compute unsigned distance field from points (a) ? initialize model to small sphere at maximum distance ? grow in normal direction with distance controlled step size ? keep deformable mesh smooth through Laplace operator ? tension trades smoothness vs inflation ? decrease tension and refine mesh if necessary ? project final mesh to MLS surface (f)

                small sphere
                grow in normal direction 
                keep deformable mesh smooth
                MLS surface
                avoids leaking
                https://www.youtube.com/watch?v=lfNMZ5N2ZxQ
                Sharf, Andrei, et al. "On-the-fly Curve-skeleton Computation for 3D Shapes." EG 2007
                Fast Extraction on Noisy Data
                Noisy Data
                in different resolutions that evolve to reconstruct the shape
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                &t imp. and paper and further reading 
                keep book of surface to skeleton correspondences and front tension
                keep book
                filter short branches of skeleton
                suitable for incomplete models 
                postprocessing
                approach is very fast and can construct skeleton in few seconds
                &t imp. and paper and further reading 
                On-the-fly Curve-Skeleton Computation
                https://www.youtube.com/watch?v=zIPohvB5vHI
                Mean Curvature Skeletons
                Tagliasacchi et.al., SGP 2012
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                &t imp. and paper and further reading 
                Iterated mesh contraction via Mean Curvature Flow
                tries to minimize its tension 
                Can be expressed with the differential equation
                &t write formulas and calculate this example 
                Remeshing is done after every iteration.
                After convergence, shortest edges are collapsed to produce a 1D curve skeleton.
                Mean Curvature Skeletons
                Final conversion to curve skeleton via Edge Collapse
                MCF Skeletons - Results
                A. Tagliasacchiy, I. Alhashim, M. Olson, H. Zhang, Mean Curvature Skeletons, SGP 2012, Code: https://code.google.com/p/starlab-mcfskel
                ? Tamal K. Dey and Jian Sun. 2006. Defining and computing curve-skeletons with medial geodesic function. In Proceedings of the fourth Eurographics symposium on Geometry processing (SGP '06). Eurographics Association, Aire-la-Ville, Switzerland, Switzerland, 143-152.
                &t imp. and paper and further reading 
                https://github.com/ataiya/starlab-mcfskel
            CG2_SS19_07_Rigging.pdf
                Rigging
                &q explain the following: 
                rig
                rigging
                skinning
                build and fit skeleton into model
                build and fit
                bone weights
                skeleton for 3D model

                Rigging from Animations
                &
                &h many riggging methods exists! 
                Pinocchio
                http://people.csail.mit.edu/ibaran/papers/2007-SIGGRAPH-Pinocchio.pdf
                fully automatic rigging and skinning of given mesh such that motion data can be mapped to mesh
                &q what is input and output of pinoccio sys.? 
                Input
                3D mesh (close to standard pose)
                skeleton (fixed topology)
                Output
                skeleton embedding
                vertex weights
                https://github.com/elrond79/Pinocchio
                allows rigging, skeleton export and animation
                Overview of Pinoccio
                &q pseudo code? proof? complexity? adv. disadv.? imppseudo code? proof? complexity? adv. disadv.? imp. &t
                Discretization
                ? Discrete Embedding through two stage discrete optimization of penalty function
                penalty function
                continuous optimization 
                Learn weights of penalty function by max margin method
                on good and bad example riggings
                Skinning Weights computation through per bone 
                heat equation

                &t imp. and paper and further readimp. and paper and further reading
                &t imp. and paper and further reading 
                construct sphere cover similar to poisson disk sampling on medial axis 
                in order of decreasing sphere radius
                Discrete Embedding
                reduce skeleton to one bone per chain
                optimize reduced skeleton by A* algorithm
                build priority queue of partial embeddings sorted by lower bound estimate of penalty function of extension to full embedding
                extract best partial embedding, try all extensions and sort them into queue
                first full embedding found is optimum
                extend reduced skeleton and perform local continuous optimization
                gradient descent
                Terms of Discrete Penalty
                Penalty
                &q what kind of Penalty can be defind? why we define them? what kind of bones will be filtered? op8 
                length unsymmetry
                vertex sharing
                zero length (counts bones of zero length)
                wrong direction unreduced (compute angle between bones in unreduced embedding and skeleton
                &q what could be the worst case that we have to filter? op8 
                7. wrong direction unreduced 
                short bones (compare lengths in embedding and in skeleton)
                Max Margin Learning
                &q what is? how is used? the idea? adv. and disadv.? 
                &t write formulas and calculate this example 
                generate a large number of positive and negative examples (lots of work!)
                penalty terms define points in 9D / 4D weighting space
                difference along this direction between minimal coordinate of bad examples and minimum coordinate of good examples is maximize
                &q what is the key idea of Max Margin Method? above! 
                &h MMM is a ml method? y can be substituted by deep learning? maybe somehow 
                eads to non convex optimization problem that is solved by randomly sample space and downhill simplex method
                Heat Based Skinning
                setting heat at bone i to 1 and 0 on all other bones
                &q what is the key idea of heat based skinning? above! 
                Solving heat equation on shape gives vertex weights
                https://www.tau.ac.il/~stoledo/taucs/
                &t imp. and paper and further reading 
                eads to sparse linear system
                Heat based weight computation
                limitations
                software plugins available
                skeleton must be given
                very thin limbs
                unclear how to find degree 2 joints such as knees
                RIGMESH
                rigging is post processing
                needs to be redone if further edit operations are necessary
                &h if you want to change the mesh during dev. you have to repeat the rigging operations! so we can draw mesh and rig it! 
                incorporate rigging into sketch based modeling
                sketch based modeling
                &h it limits on sketch based modeling -- when we are drawing the meshes by ourself 
                advantage
                no post processing necessary
                Skeleton based animation possible ? animation quality can be tested early 
                animation quality can be tested early in modeling process
                quality can be tested
                &q what is? how is used? the idea? adv. and disadv.? 
                makes Pinocchio system incremental
                https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm
                based on generalization of Douglas Peucker algorithm
                &t imp. and paper and further reading 
                Douglas Peucker algorithm
                skeletonize
                animate
                merge
                http://www.youtube.com/watch?v=1prInV9ZNY0
                http://cs.gmu.edu/~ygingold/rigmesh
                &t imp. and paper and further reading 
                RIGGING FROM ANIMATIONS
                &h similar to ml idea 
                &q explain the idea of this with a graph op18 
                &q what is the input and output of this process?
                Input: animated mesh
                Output: bones, vertex weights, bone motion
                Advantages
                compression
                http://graphics.cs.cmu.edu/projects/sma/
                Fast and Efficient Skinning of Animated Meshes
                http://www.jarmilakavanova.cz/ladislav/papers/sam-eg10/sam-eg10.htm
                &
                &t imp. and paper and further reading 
                segment triangles into rigid and flexible parts by examining their time evolutions
                for each triangle compute feature vector consisting of concatenation of per frame rotations between triangle in initial pose and frame pose

                for each triangle 
                Perform mean shift clustering in rotation sequences
                clustering
                &h it is actually a clustering method -- how can we cluster/ segmentation diff. parts of a given mesh? consider this!
                triangle segmentation
                rigid bone estimation
                averaging over all rotation matrices of bone triangles
                compute rotation with polar decomposition
                a factorization of the form
                Polar 
                https://en.wikipedia.org/wiki/Polar_decomposition
                compute translation with area-weighted least squares fit to triangle centers

                &t imp. and paper and further reading 
                &h calcu. is not so straghtforward, we can imp. other simpler cases first when building our building block!
                directly do least squares fit of affine transformation to triangle centers
                bone estimation
                least squares fit
                &h actually, it has been transformed to optimization problem, and we can always find a way to solve it! 
                Estimate Vertex Weights
                firstly, bone influences are estimated
                per vertex to a constrained linear least squares problem in the weights (must sum to 1)
                constrained linear least squares problem 
                &h similar optimization can be found! 
                &h when we estimating vertex weights (we have already estimated bone weights above)
                Avoiding overfitting
                &q how can we Avoiding overfitting? 
                can yield large negative weights leading to overfitting
                weird artefacts in new bone poses
                truncated least squares or even better by non negative least squares
                http://graphics.cs.cmu.edu/projects/sma
                https://www.youtube.com/v/e0rugcfR8K4
                F&ESAM � Matrix Formulation
                &t write formulas and calculate this example 
                &h op27 
                &q what is? how is used? the idea? adv. and disadv.? SMA!
                &q how can we improve this method? SMA? 
                To improve efficiency the problem is solved in a reduced ?? � ?? - dimensional trajectory space
                ? This can be solved by SVD, but Kavan et al. propose an alternate method that yields larger ?? but in much shorter time,
                the overall runtime is reduced significantly
                &h the last mehtod could be slow for we have to calcu. affine transformation per vertex
                Matrix Decomposition
                &h for skinning properse, a spec. Matrix Decomposition can be introduced
                P�ter Boros�n, Ming Jin, Doug DeCarlo, Yotam Gingold, and Andrew Nealen. 2012. RigMesh: automatic rigging for part-based shape modeling and deformation. ACM Trans. Graph. 31, 6
                http://people.csail.mit.edu/ibaran/papers/2007-SIGGRAPH-Pinocchio.pdf
                Skinning mesh animations: http://graphics.cs.cmu.edu/projects/sma/ ? L. Kavan, P.-P. Sloan, C. O'Sullivan, 
                Fast and Efficient Skinning of Animated Meshes, CGF 2010 http://www.jarmilakavanova.cz/ladislav/papers/sam-eg10/sam-eg10.htm
            CG2_SS19_08_Subdivision-Curves.pdf
                &t imp. and paper and further reading
                    Subdivision Curves
                    Warren, Weimer: Subdivision Methods for Geometric Design: a constructive approach, Morgan Kaufmann 2002
                    Malcom Sabin: Continuity Analysis of Subdivision Curves
                &q what is? how is used? the idea? adv. and disadv.? 
                    > Corner Cutting
                    quadratischer B-Spline
                    &t imp. and paper and further reading 
                &q explain the following 
                    > subdivision scheme:
                    > subdivision step
                    > stationary schemes
                    > even points
                    > odd points
                    > linear
                    > Interpolating vs. approximating
                    subdivision scheme: rule that maps polygon to a polygon with more points ? 
                    subdivision step: one application of the subdivision rule ? 
                    arity a: fraction of number of points after subdivision step divided by number of points before, often a?
                    stationary schemes: subdivision rule is independent of location in polygon and independent of point position ? 
                    even points: old points that existed before a subdivision step and are still exisiting afterwards
                    odd points: points inserted by a subdivision step ? 
                    linear: rule is affine combination of even points ? 
                    Interpolating vs. approximating: rule preserves / does not preserve positions of even points
                    more points
                    one application of the subdivision rule
                    fraction 
                    divided by number of points before
                    often a?2
                    s independent of location in polygon
                    stationary
                    even points: old points
                    before a subdivision step
                    odd points: points inserted
                    linear: rule is affine combination of even points
                &q write formulas and calculate this example. op5 Curves � matrix notation
                &t for Schemata,mask, write formulas and calculate this example op6 7
                &q what is? how is used? the idea? adv. and disadv.? 
                    > Local Subdivision Matrix
                    > Eigenvalue Analysis
                    > provides stencils for the limit position and limit tangents
                    > z-Transformation
                    > maps the coordinate vectors to polynomials
                &t imp. and paper and further reading 
                &p some formulas detail 
                &q what is? how is used? the idea? adv. and disadv.? 
                    > Sufficient Continuity Condition
                    > a mask is called contractive,
                    if the absolute values of even and odd elements, i.e. of the stencils, sum to less than 1. 
                    The limit curve is Ck -continuous
                    if the k?1-th difference scheme multiplied by 2 k is contractive
                    i.e. m(z) can be divided by (z?1) k?1 and 2 k �? k?1m(z) is contractive.
                &q what is? how is used? the idea? adv. and disadv.? 
                &t imp. and paper and further reading 
                &h these two are analysis tools, we can use them to check: Ck-continuous or contractive
                &q what is convergence and continuity criteria? op13!! 
                    > z-Transformation
                    > Eigenvalue Analysis
                convergence and continuity criteria
            CG2_SS19_09_Subdivision-Surfaces.pdf
                Subdivision Surfaces
                arbitrary topology: (spherical, toroidal, double toroidal
                scalability: by definition multi-scale representation
                numerical robust: if you start with well behaved base meshes suitable for FEM solvers, the subdivided meshes inherit the good proberties
                good proberties

                simple implementation: code is quite simple even though mathematical analysis is rather involved
                construction of basis functions and wavelets over surface possible
                local rules: computational rules should not depend on distant points
                affine invariance: affine transformations and subdivision process should be commutative
                commutative
                continuity: limit curves and surfaces should be as smooth as possible
                limit curves
                &q what is limit curves
                Midpoint Subdivision
                &h  many subdevision method exists, have diff. properties! 
                Peters, J. und Reif, U.: The Simplest Subdivision Scheme for Smoothing Polyhedra. ACM Transactions on Graphics 16 (1997), S. 420-431.
                &t imp. and paper and further reading 
                split process into subdivision and smoothing:
                Interpretation
                Vocabulary
                &q explain the following 
                ordinary vertex
                in triangle meshes valence 6 and at boundary valence 4 in quad meshes valence 4 and at boundary valence 3
                extraordinary vertex
                The first subdivision step separates all extraordinary vertices
                Therefore the limit surface only needs to be analized in neighborhood of ordinary and isolated extraordinary points
                analized in neighborhood of ordinary
                Types
                triangle vs. quad mesh
                approximating vs. interpolating
                rule preserves / does not preserve positions of even points

                Interpolating vs. approximating
                Interpolating
                preserves
                continuity of limit surfaces
                subdivision step: face split vs. vertex split
                &h many possibilities exists! 
                &q what kind of subdivision methods are there? x8 op10
                quad split
                triangle split
                vertex split
                &q explain the diff. bet.  above! 
                Loop
                Butterfly
                Kobbelt
                Catmull Clark
                Doo Sabin
                Midedge
                Biquartic
                &t try out those subdivision schmata! 
                &t imp. and paper and further reading 
                &q compare them! op12 make it as picmem.
                Butterfly Subdivision 
                a face split scheme on triangle meshes
                face split
                Positions of old vertices are preserved, such that we get an interpolating scheme
                Butterfly-stencil is used for edge points
                On boundary edges
                &q have spec. stencil on boundaries? y 
                &q the stencil of it! op21 op22 picmem!
                &h Extraordinary boundary rule exists! 
                Decision tree
                &q how can we make sure, which rule to apply? with what tech.? 
                &q Decision tree, kind of state machine ...
                Edge is boundary
                two inner vertices
                Butterfly-Regel
                one inner vertex
                two boundary vertices
                &h diff. cases may occour 
                Nie?ner, M., Loop, C., Meyer, M., & Derose, T. (2012). Feature-adaptive GPU rendering of Catmull-Clark subdivision surfaces. ACM Transactions on Graphics (TOG), 31(1), 6.
                &q given a picture, judge which subdivision method has been used! op36 
                There does not exist a surface subdivision scheme that is C2 -continuous also at extraordinary points

                &h 
                Continuity
                All subdivision schemes have different artefacts at irregular vertices
                visualization of the influence or base function corresponding to one vertex
                &t illu. vis !
                Interpolation of the positions of a base mesh is also possible for approximating schemes if limit stencil is known
                &q would it possible to calcu. the final subdivision directly? y op40 
                &t imp. and paper and further reading 
                &q it would be no local scheme! global! 
            CG2_SS19_10_IK.pdf
                Inverse Kinematics & Motion Capturing
                Inverse Kinematics Problem
                &q what is? how is used? the idea? adv. and disadv.? 
                inverse kinematics problems solves
                &q what is teh input and output of IK? 
                &t write formulas and calculate this example  op4 
                state vector
                parameters
                dependent variables
                parameters
                the end effector pose
                degrees of freedom (DOF)
                ? In most cases the DOFs does not match the number of dependent variables and IK becomes ill-posed 
                or unsolvable
                DOFs does not match the number of dependent variables
                &h ill posed means that there maybe multiple solutions! 
                often posed in form of a least squares energy minimization
                &q draw a graph to illu. why IK problem is always ill-posed
                &h op5 
                degenerate or singular configurations
                the end effector looses one or several degrees of freedom
                oscillations during IK
                &t further reading, what is oscillations during IK
                &h op6 not sufficient for understanding 
                &p 
                different constraints
                &q what kind of different
                &constraints 
                &q can be found? op7
                collision constraints
                avoid self-collisions 
                joint angle constraints 
                position constraints to restrict the movement of the end effector
                orientation constraints to restrict the orientation of the end effector, for example in case of special demands for grasping.

                grasping
                &h think about the arm chain of robots, grasping! 
                start with some initial guess 
                for the parameter vector
                the default state
                state of the previous time step in an animation
                the result of a previous optimization phase
                some descent direction ?????? is found in parameter space

                Steps ????+1 = ???? + h???????? are taken until no further improvement in energy is possible.
                relative transformation 
                &q what is? how is used? the idea? adv. and disadv.? 
                &op9
                Forward Kinematics
                kinematic chain
                The forward kinematics is described as a function ?? that maps the ??-dimensional parameter vector ?? to a 6D pose:
                maps the ??-dimensional parameter vector
                &q describe the forward Kinematics and IK in math. op10 
                &q what is f? mapping from n para. vector to a 6d pose 
                &q how energy is defined? op10 
                This is a non linear least squares problem
                One can introduce weights
                &p why we can define weights? diff. bone may have diff. effects? y 
                Orientation Matrix Formulation
                Euler Angle Formulatio
                The weights ???? can be used to blend out orientation constraints for individual axes
                &p the formula when using Orientation Matrix Formulation?? 
                &h op12 
                Quaternion Formulation
                &q what kind of formulations can be found when representing IK problems?
                &h x3 
                With a normalized quaternion ?? ? = ?? ?? ?? ?? the pose is 7D
                &q how can we formulate the IK problem with Quaternion?
                &q what problems can arise in this case? op13 hwo can we solve that prob. caused by dual meaning of quaternoin?
                &q how many dofs are needed in each formulation?
                &h 6d 10d 7d 
                Skeleton IK
                &q what is? how is used? the idea? adv. and disadv.? 
                multiple target locations are important
                working with multiple end effectors
                &q hwo can we solve skel. IK? op14 
                optimize
                minimizing the squared sum of the end effector constraints with the Kabsch algorithm
                Kabsch algorithm
                minimizing an energy that sums over the squared endeffector-constraint distances where the endeffector locations are computed along kinematic chains from the fixed root node
                &p cannot understand, further reading &t 
                &h op14 
                &t code reading may help
                &h above is about how can we formulate the IK prob. with math tools 
                adding fixation points (in the simplest case one at the root node) 
                fixation points 
                In an interactive editor one has to define kinematic chains based on user input
                For a climbing figure we need several end effector constraints. This is discussed by Chris Hecker on his inverse kinematics page
                http://www.chrishecker.com/Inverse_kinematics
                particle-based solver (like SHAKE, RATTLE, Jakobsen)
                rigid body dynamics solver
                Cyclic Coordinate Descent (CCD)
                simple serial analytical IK
                My Adventures in Inverse Kinematics.
                http://www.chrishecker.com/images/7/76/Gdc2002-ik.ppt
                http://www.chrishecker.com/Inverse_kinematics
                &t imp. and paper and further reading 
                Dual quaternion IK was presented by Ben Kenwright in 2013: Inverse Kinematics with Dual-Quaternions, Exponential-Maps, and Joint Limits

                Inverse Kinematics with Dual-Quaternions, Exponential-Maps, and Joint Limits
                &t imp. and paper and further reading 
                CYCLIC COORDINATE DESCENT
                &h ccd is one of the most simple solvers 
                need an initial guess
                monoton
                Line Search Approach
                Trust Region Approach
                Another mentionable derivative-free alternative is the Downhill-Simplex method of Nelder and Mead
                Coordinate Descent: 
                Powell‘s method:

                line search along search directions
                &h ccd is coordinate aligned
                Search directions are standard basis vectors
                Line Search Approach
                &q which 3 method found with Line Search Approach? op17 
                CCD
                s often used to generate initial guess for secondary method with fast convergence rate close to optimum 
                coordinate descent can be implemented efficiently as the line search problem can be solved analytically
                for secondary method
                &q pseudo code? proof? complexity? adv. disadv.? imp. &t 
                reduce IK to parameter
                &p op19 reduce IK to parameter??
                CCD – Line Search
                &q how CCD - Line Search behaves in the simplest case? given pic. op20 
                reformulate energy minimization in local coordinates according to Orientation Matrix Formulation
                CCD – Line Search – Full Approach
                reformulate
                &q reformulate the math formulas before to the case that uses ccd method! op21 
                Orientation term
                Position term
                &p op22 can not understand 
                the CCD can get stuck in degenerate situations
                random offset 
                solution
                degenerate situations
                &q how to hadle degenerate situations for the ccd algo?
                &h op24 
                UNCONSTRAINED IK
                https://www.youtube.com/watch?v=-z_l7Jdz8Bo
                &
                &h ccd can either be constrained or unconstrained
                UNCONSTRAINED IK
                Steepest Descent
                Newton
                convergence rate near local minimum quadratic
                Quasi Newton methods
                track approximation of Hessian or its inverse
                Quasi Newton methods track approximation of Hessian or its inverse
                Newton methods
                &h we can use Newton methods or Quasi xxx for solving unconstrained mode 
                Furthermore
                DFP
                BFGS
                Low memory implementation 
                L-BFGS
                Broyden–Fletcher–Goldfarb–Shanno (BFGS) method
                Davidon–Fletcher–Powell formula
                &t imp. and paper and further reading 
                &h many related method can be used!! 
                &t imp. and paper and further reading 
                Weighted Non Linear Least Squares
                WNLLS
                One problem with the Gauss-Newton method is that the Pseudo inverse becomes unstable in degenerate positions
                One problem with the Gauss-Newton method
                &q One problem with the
                &Gauss-Newton methodq ?
                This problem does not arise in the steepest descent method where only the transposed of the Jacobian is used
                ? Idea: combine both methods optimally
                &h diff. methods may be combined! 
                &t write formulas and calculate this example 
                Descent directions
                &q which Descent directions can be found?
                the resulting WNLLS approach is then called Gauss-Newton method
                &
                Levenberg Marquardt 
                combine steepest descent
                with
                Gauss-Newton approach
                ?? is initialized to large values and decreased close to the optimum
                &q how the additional para. be handled in this method? (can be seen as a combined method)
                Levenberg Marquardt suggest to adapt ??-control to the directional curvature by the generalization
                &
                &t imp. and paper and further reading 
                &t write formulas and calculate this example 
                &h op33 
                Self-adapting Levenberg Marquardt
                self-adaptive LM method
                Descent with steepest descend direction is also called transposed Jacobian method in IK literature
                It needs to be combined with a line search method
                a single iteration is fast
                often used in interactive IK approaches, e.g. in character pose editors.
                Newton direction computed from the approximate Hessian is called Gauss-Newton method or non linear least squares in math and inverse Jacobian method in IK
                Newton direction computed from the approximate Hessian
                The natural step width of 1 simplifies line search.
                The taxi cab method corresponds to iteratively optimize only one joint parameter at the time
                only one joint parameter at the time
                This is called cyclic coordinate descent method in IK
                often implemented as the optimal step width can be computed analytically
                &h ccd always as a pre-processing step
                ? Levenberg-Marquardt and BFGS are better than inverse Jacobian and often used for IK
                one can use the non linear conjugate gradient method discussed in CG1.

                https://en.wikipedia.org/wiki/Conjugate_gradient_method
                &t imp. and paper and further reading 
                &t further reading 
                start with cyclic coordinate descent and continue with Levenberg-Marquardt or BFGS.
                &h the stru. is clear now! 
                CONSTRAINED IK
                Parameter Constraints
                lower and upper bound:
                simple constraints and the optimization problem is called bound constrained.
                bound constrained
                &q bound constrained can easily be handled? y 
                these constraints can be easily incorporated by the gradient projection method:
                defines the projection operation
                uses this to project descent directions to the feasible region
                The rest of the algorithms stays the same
                http://users.iems.northwestern.edu/~nocedal/lbfgsb.html
                https://github.com/PatWie/CppNumericalSolvers
                &t imp. and paper and further reading 
                General Constraints
                Positional constraints like that a foot should stay on the floor are non linear in the parameters
                foot should stay on the floor
                non linear in the parameters
                in the form of equalities or inequalities
                Lagrangian multiplier method incorporates constraints
                constraint forces can be derived from constraints
                reinforce constraints in case of numerical deviations
                equality constraints
                &q how can we handle equality constraints in general case? op39 and inque.! x2x1 
                &q what is? how is used? the idea? adv. and disadv.? 
                &t imp. and paper and further reading 
                Linear complementary problems (LCP)
                &t additional efforts!! if you want to get a clear view of the whole field! 
                MOTION CAPTURING
                MoCap
                illuminate markers from all directions
                add markers at joints
                from all directions

                acquire views from several synchronized cameras

                detect markers in each acquired view
                reconstruct 3D positions
                track points over time
                extension: use light emitters of different frequency as markers with id (no matching necessary)
                Standard MoCap Approach
                &q what is? how is used? the idea? adv. and disadv.? 
                &Standard MoCap Approach
                &h op41 
                use motion capture data to disambiguate IK
                solve IK problem by maximizing pose probability
                Keith Grochow, Steven L. Martin, Aaron Hertzmann, Zoran Popovic, Siggraph 2004
                Style-Based Inverse Kinematics
                http://grail.cs.washington.edu/projects/styleik/
                &t imp. and paper and further reading 
                &t further reading! 
                Red points are training poses
                orange connections mark some training poses
                https://www.youtube.com/watch?v=X5Z7ZJ39zAA
                RGBD Motion Capturing
                &q typical methods for motion capturing? x3 op45 
                &q what is? how is used? the idea? adv. and disadv.?  compare them!
                uses depth camera with a machine learning approach
                http://research.microsoft.com/apps/pubs/default.aspx?id=162510
                Taylor, Shotton, Sharp, Fitzgibbon CVPR 2012
                &h this is a computer vision approach 
                2D parameterized template human mesh (vitruvian manifold)

                use decision tree to estimate per pixel texcoords
                Interactive Motion Mapping
                Helge Rhodin, James Tompkin, Kwang In Kim, Kiran Varanasi, Hans-Peter Seidel, Christian Theobalt, Eurographics 2014 (http)

                http://gvv.mpi-inf.mpg.de/projects/DirectMotionMapping/
                use Kinect skeleton tracking to steer character
                steer character
                &h steer means control in simple words 
                Given sparse pose mapping from source to target, learn pose mapping without rigging and skinning
                interactive control of virtual character
                https://www.youtube.com/watch?v=SG5D12tBBAk
                &t imp. and paper and further reading 
                SKELETON FITTING
                &q what is? how is used? the idea? adv. and disadv.? 
                Input: set of 3D marker points tracked over time 
                markers can be occluded 
                Output: skeleton topology
                bone lengths, joint locations in rotation centers
                Reference: Adam G. Kirk James F. O¡¯Brien David A. Forsyth, Skeletal Parameter Estimation from Optical Motion Capture Data, CVPR 2015
                &h that is also a computer vision task 
                &h for the case of motion capturing with kinect 
                &paper may have some impro. cap. motion in vr! 
                &t imp. and paper and further reading 
                http://graphics.berkeley.edu/papers/Kirk-SPE-2005-06
                extract topology by minimum spanning tree
                use IK to extract joint parameters 
                build matrix of marker pair distances and measure pair distance variance over time
                http://graphics.berkeley.edu/papers/Kirk-SPE-2005-06/
                http://graphics.berkeley.edu/papers/Kirk-SPE-2005-06/Kirk-SPE-2005-06.pdf
                Wang, L-CT, and Chih-Cheng Chen. "A combined optimization method for solving the inverse kinematics problems of mechanical manipulators." Robotics and Automation, IEEE Transactions on 7.4 (1991): 489-499
                Welman, Chris. Inverse kinematics and geometric constraints for articulated figure manipulation. Diss. Simon Fraser University, 1993.
                Meredith, Michael, and Steve Maddock. Real-time inverse kinematics: The return of the Jacobian. Technical Report No. CS-04-06, Department of Computer Science, University of Sheffield, 2004.
                Shan, Shidong. A Levenberg-Marquardt method for large-scale bound-constrained nonlinear least-squares. Diss. The University of British Columbia (Vancouver), 2008
                Kenwright, Ben. "Inverse Kinematics with Dual-Quaternions, Exponential-Maps, and Joint Limits." International Journal On Advances in Intelligent Systems 6.1 and 2 (2013): 53-65
                http://chrishecker.com/Inverse_kinematics
                https://github.com/PatWie/CppNumericalSolvers
                L-BFGS-B Solver in C++
                Adam G. Kirk James F. O¡¯Brien David A. Forsyth, Skeletal Parameter Estimation from Optical Motion Capture Data, CVPR 2015

                &t imp. and paper and further reading 
        slides--tud_cg3 
            CG3_00_Intro.pdf
            CG3_01_Physically-Based-Simulation.pdf
            CG3_02_Rendering-Equation.pdf
            CG3_03_Monte-Carlo-Techniques.pdf
            CG3_04_Sampling-Techniques.pdf
            CG3_05_Path-Based-Rendering (1).pdf
            CG3_05_Path-Based-Rendering.pdf
            CG3_06_Advanced_Materials.pdf
            CG3_07_Cache-Based-GI.pdf
            CG3_08_DGLs.pdf
            CG3_09_Particles.pdf
            CG3_10_RigidBody.pdf
            CG3_11_Collision.pdf
            CG3_12_Fluid.pdf
            CG3_WS17_Fragenkatalog.pdf
        book--http://www.pmp-book.org/	
            - Surface Representations & Mesh Data Structures
            - Differential Geometry
            - Smoothing
            - Parametrization
            - Remeshing
            - Simplification & Approximation
            - Model Repair
            - Deformation
            - Numerics
        slides--tud_scivis
        book--pbrt: http://www.pbr-book.org/3ed-2018/contents.html
            1 Introduction
                1.1 Literate Programming
                1.2 Photorealistic Rendering and the Ray-Tracing Algorithm
                1.3 pbrt: System Overview
                1.4 Parallelization of pbrt
                1.5 How to Proceed through This Book
                1.6 Using and Understanding the Code
                1.7 A Brief History of Physically Based Rendering
                Further Reading
                Exercises
            2 Geometry and Transformations
                2.1 Coordinate Systems
                2.2 Vectors
                2.3 Points
                2.4 Normals
                2.5 Rays
                2.6 Bounding Boxes
                2.7 Transformations
                2.8 Applying Transformations
                2.9 Animating Transformations
                2.10 Interactions
                Further Reading
                Exercises
            3 Shapes
                3.1 Basic Shape Interface
                3.2 Spheres
                3.3 Cylinders
                3.4 Disks
                3.5 Other Quadrics
                3.6 Triangle Meshes
                3.7 Curves
                3.8 Subdivision Surfaces
                3.9 Managing Rounding Error
                Further Reading
                Exercises
            4 Primitives and Intersection Acceleration
                4.1 Primitive Interface and Geometric Primitives
                4.2 Aggregates
                4.3 Bounding Volume Hierarchies
                4.4 Kd-Tree Accelerator
                Further Reading
                Exercises
            5 Color and Radiometry
                5.1 Spectral Representation
                5.2 The SampledSpectrum Class
                5.3 RGBSpectrum Implementation
                5.4 Radiometry
                5.5 Working with Radiometric Integrals
                5.6 Surface Reflection
                Further Reading
                Exercises
            6 Camera Models
                6.1 Camera Model
                6.2 Projective Camera Models
                6.3 Environment Camera
                6.4 Realistic Cameras
                Further Reading
                Exercises
            7 Sampling and Reconstruction
                7.1 Sampling Theory
                7.2 Sampling Interface
                7.3 Stratified Sampling
                7.4 The Halton Sampler
                7.5 (0, 2)-Sequence Sampler
                7.6 Maximized Minimal Distance Sampler
                7.7 Sobol’ Sampler
                7.8 Image Reconstruction
                7.9 Film and the Imaging Pipeline
                Further Reading
                Exercises
            8 Reflection Models
                8.1 Basic Interface
                8.2 Specular Reflection and Transmission
                8.3 Lambertian Reflection
                8.4 Microfacet Models
                8.5 Fresnel Incidence Effects
                8.6 Fourier Basis BSDFs
                Further Reading
                Exercises
            9 Materials
                9.1 BSDFs
                9.2 Material Interface and Implementations
                9.3 Bump Mapping
                Further Reading
                Exercises
            10 Texture
                10.1 Sampling and Antialiasing
                10.2 Texture Coordinate Generation
                10.3 Texture Interface and Basic Textures
                10.4 Image Texture
                10.5 Solid and Procedural Texturing
                10.6 Noise
                Further Reading
                Exercises
            11 Volume Scattering
                11.1 Volume Scattering Processes
                11.2 Phase Functions
                11.3 Media
                11.4 The BSSRDF
                Further Reading
                Exercises
            12 Light Sources
                12.1 Light Emission
                12.2 Light Interface
                12.3 Point Lights
                12.4 Distant Lights
                12.5 Area Lights
                12.6 Infinite Area Lights
                Further Reading
                Exercises
            13 Monte Carlo Integration
                13.1 Background and Probability Review
                13.2 The Monte Carlo Estimator
                13.3 Sampling Random Variables
                13.4 Metropolis Sampling
                13.5 Transforming between Distributions
                13.6 2D Sampling with Multidimensional Transformations
                13.7 Russian Roulette and Splitting
                13.8 Careful Sample Placement
                13.9 Bias
                13.10 Importance Sampling
                Further Reading
                Exercises
            14 Light Transport I: Surface Reflection
                14.1 Sampling Reflection Functions
                14.2 Sampling Light Sources
                14.3 Direct Lighting
                14.4 The Light Transport Equation
                14.5 Path Tracing
                Further Reading
                Exercises
            15 Light Transport II: Volume Rendering
                15.1 The Equation of Transfer
                15.2 Sampling Volume Scattering
                15.3 Volumetric Light Transport
                15.4 Sampling Subsurface Reflection Functions
                15.5 Subsurface Scattering Using the Diffusion Equation
                Further Reading
                Exercises
            16 Light Transport III: Bidirectional Methods
                16.1 The Path-Space Measurement Equation
                16.2 Stochastic Progressive Photon Mapping
                16.3 Bidirectional Path Tracing
                16.4 Metropolis Light Transport
                Further Reading
                Exercises
            17 Retrospective and The Future
                17.1 Design Retrospective
                17.2 Alternative Hardware Architectures
                17.3 Conclusion
                Further Reading
            A Utilities
                A.1 Main Include File
                A.2 Image File Input and Output
                A.3 Communicating with the User
                A.4 Memory Management
                A.5 Mathematical Routines
                A.6 Parallelism
                A.7 Statistics
                Further Reading
                Exercises
            B Scene Description Interface
                B.1 Parameter Sets
                B.2 Initialization and Rendering Options
                B.3 Scene Definition
                B.4 Adding New Object Implementations
                Further Reading
                Exercises
        book--OpenGL入门教程
            basic func. 
                glVertex — specify a vertex
                qq what does this mean? glVertex3fv 
                    (spec. logical "points")
                    glVertex commands are used within glBegin/glEnd pairs to specify point, line, and polygon vertices
                    The current color, normal, texture coordinates, and fog coordinate are associated with the vertex when glVertex is called.
                    *Invoking glVertex outside of a glBegin/glEnd pair results in undefined behavior.
                qq OpenGL 是如何知道我想拿这些顶点来干什么呢？是一个一个的画出来，还是连成线？或者构成一个多边形？或者做其它什么事情？
                    OpenGL 要求：指定顶点的命令必须包含在 glBegin 函数之后，glEnd 函数之前
                    并由 glBegin 来指明如何使用这些点。
                    (glBegin)
                    Specifies the primitive or primitives that will be created from vertices
                    group of like primitives
                    specifies in which of ten ways the vertices are interpreted.
                    GL_LINES
                        Treats each *pair of vertices as an independent line segment.    
                    GL_LINE_STRIP
                        Draws a connected group of line segments from the first vertex to the last.
                    GL_TRIANGLES
                        Treats each *triplet of vertices as an independent triangle.
                    GL_TRIANGLE_STRIP
                        For odd n, vertices n, n + 1 , and n + 2 define triangle n. For even n, vertices n + 1 , n, 
                            and n + 2 define triangle n. N - 2 triangles are drawn.
                    GL_TRIANGLE_FAN
                        all the vertices need to go around the central vertex
                    GL_POLYGON
                        Draws a single, convex polygon. Vertices 1 through N define this polygon.
                task- draw a fan with lines, draw polygon...
                task- draw line with timer func. (anim. )
                task- 画一个圆, 画一个五角星 op6 画出正弦函数的图形 
                qq given vertices data and opengl draw command, say, what will happen 
                qq can it be a complete circle when using line GL_LINE_STRIP? n how to make it complete? 
                h- glBegin 其实是在设置opengl状态，glVertex...是在发送数据到gpu
                大家可以发挥自己的想象，画出各种几何图形或者各种函数图像--辅助数学的学习是可以做到的
                ---设置样式
                点的大小默认为 1 个像素，但也可以改变之。改变的命令为 glPointSize
                qq how points be represented in opengl? circle or square? s. 
                glPointSize:
                + naming convention
                    + a naming convention is a set of rules for choosing the 
                        character sequence to be used for identifiers which denote variables, types, functions
                        enable code reviews to focus on more important issues than arguing over syntax and naming standards.
                        with partisans of each holding theirs to be the best and others to be inferior.
                        Many companies have also established their own set of conventions.
                    little camel-case
                    big camel-case
                    snake case naming style
                        practice of writing compound words or phrases
                        elements are separated with one underscore character (_) and no spaces
                        usually lowercased within the compound
                        Naming convention
                h- opengl uses small camel naming style 
                可以设置样式--使用 glLineStipple 来设置虚线的样式
                使用pattern与factor控制样式，具体由gl来计算
                task- draw LINE_STIPPLE with opengl 
                ---
                一个多边形具有两个面。每一个面都可以设置不同的绘制方式：填充、只绘制边缘轮:GL_FILL, GL_LINE, GL_POINT 
                glPolygonMode(GL_FRONT, GL_FILL); 
                可以交换正反概念：glFrontFace(GL_CCW); // 设置 CCW 方向为“正面”，CCW 即 CounterClockWise，逆时针， CW 
                使用 glEnable(GL_CULL_FACE);来启动剔除功能（使用 glDisable(GL_CULL_FACE)可以关闭之）
                然后，使用 glCullFace 来进行剔除。
                glCullFace 的参数可以是 GL_FRONT，GL_BACK 或者 GL_FRONT_AND_BACK，分别表示剔除正面、剔
                    除反面、剔除正反两面的多边形。
                使用 glCullFace(GL_FRONT_AND_BACK) 后，所有的多边形都将被剔除，所以看见的就只有点和直线。
                qq does it has influ. for points and lines? n 
                qq what happends if we do glCullFace(GL_FRONT_AND_BACK)? what can be seen from the scene still? 
                qq 默认是关闭的？（至少直接模式下，性能没有被考虑--默认faceculling是disabled）
                直线可以被画成虚线，而多边形则可以进行镂空。
                glEnable(GL_POLYGON_STIPPLE);来启动镂空模式
                参数 mask 指向一个长度为 128 字节的空间，它表示了一个 32*32 的矩形应该如何镂空
                使用 glPolygonStipple 来设置镂空的样式
                h- 这些细节会使我们在一些图象绘制中更加得心应手。
                可以把一些数据写到程序之外的文件中，并用专门的工具编辑之
                ---
                两种颜色模式
                    一种是 RGBA，一种是颜色索引模式
                RGBA 模式中，数据直接就代表了颜色；而颜色索引模式中，数据代表的是一个索引，要得到真正的颜色，还必须去查索引表
                glColor*系列函数可以用于设置颜色
                glColor3f(1.0f, 0.0f, 0.0f); 表示不使用绿、蓝色，而将红色使用最多，于是得到最纯净的红色
                如果 OpenGL 找不到精确的颜色，会进行类似“四舍五入”的处理。
                qq 如何设置颜色？用一个shader模拟一下
                OpenGL 并直接没有提供设置颜色表的方法，因此设置颜色表需要使用操作系统的支持。
                OpenGL 工具包：aux。这个工具包是 VisualStudio 自带的，不必另外安装，但它已经过时
                在 RGB 模式下，使用 glClearColor 来指定“空”的颜色
                ext+
                    glClear（）
                    函数的作用是用当前缓冲区清除值
                    第一条语句表示清除颜色设为黑色，第二条语句表示实际完成了把整个窗口清除为黑色的任务--glClear 
                    qq if we only have glClearColor（0.0，0.0，0.0，0.0）; what can be the result 
                    像素检验、裁剪检验、抖动和缓存的写屏蔽都会影响glClear的操作，其中，裁剪范围限制了清除的区域，而glClear命令还会
                        忽略alpha函数、融合函数、逻辑操作、模板、纹理映射和z缓存
                OpenGL 会计算两点顶点之间的其它点，并为它们填上“合适”的颜色，使相邻的点的颜色值都比较接近
                默认是渐变效果，如果是flat就不会：GL_SMOOTH， GL_FLAT
                ---
                我们可能希望把整个看到的图形画下来，但它只占据纸张的一部分，而不是全部。（视口变换）
                OpenGL 变换实际上是通过矩阵乘法来实现
                模型变换和视图变换--
                    从“相对移动”的观点来看，改变观察点的位置与方向和改变物体本身的位置与方向具有等效性。
                    在 OpenGL 中，实现这两种功能甚至使用的是同样的函数。
                    对应shader中的model matrix 和 view matrix 
                qq we can remove translation part of mv matrix? y 
                实际变换的顺序与代码中写的顺序是相反的
                qq ((RT)v) = (R(Tv))的含义是？
                于“先移动后旋转”和“先旋转后移动”得到的结果很可能不同
                qq why designed like so? OpenGL 之所以这样设计，是为了得到更高的效率。
                ---
                投影变换 x2 basic
                    glFrustum透视投影
                        平接头体
                    glOrtho正投影
                        相当于在无限远处观察得到的结果，它只是一种理想状态。但对于计算机来说，使用正投影有可能
                            获得更好的运行速度
                ---
                我们在进行矩阵操作时，有可能需要先保存某个矩阵，过一段时间再恢复它。当我们需要保存时，
                    调用 glPushMatrix 函数
                OpenGL 规定堆栈的容量至少可以 容纳 32 个矩阵
                通常，用这种先保存后恢复的措施，比先变换再逆变换要更方便，更快速。
                模型视图矩阵和投影矩阵都有相应的堆栈。使用 glMatrixMode 来指定当前操作的究竟是模
                    型视图矩阵还是投影矩阵。
                *gluLookAt — define a viewing transformation
                    creates a viewing matrix derived from its para. 
                    qq gluLookAt is equivalent to? use glMultMatrixf
                    https://www.khronos.org/registry/OpenGL-Refpages/gl2.1/xhtml/gluLookAt.xml
                ---回调函数？timer in Legacy opengl?
                *qq 举例说明我们自己的程序无法掌握究竟什么时候该绘制窗口?
                    假如你的程序窗口碰巧被别的窗口遮住了，后来用户又把原
                    来遮住的窗口移开，这时你的窗口需要重新绘制。很不幸的，你无法知道这一事件发生的具体时
                    间。因此这一切只好委托操作系统来办了。
                glutIdleFunc(&myIdle);
                GLUT 工具包也提供了一个比较类似的函数：glutIdleFunc，表示在 CPU 空闲
                    的时间调用某一函数。其实 GLUT 还提供了一些别的函数，例如“在键盘按下时做某事”等
                ...
                获得帧率？ 
                    帧速就是一秒钟内播放的画面数目（FPS）。我们可以先测量绘制两幅画面之间时间 t，
                    实际上可能还有别的方法实现这个
                通常 C 语言的 time 函数精确度一般只到一秒
                clock 函数也就到十毫秒左右
                +h-
                    opengl2 legacy模式仅仅开放很少功能，后面opengl3等开放越来越多的可编程管线，包括后面的vulkan
                    但是同时又有很多人用python或者其他语言简化编程的过程，这是为啥？或许并不矛盾？ pp-
                    posi- 显示api的开放代表着硬件的提升，vulkan基本开放了整个过程。py抽象代表着软件的提升
                        最终的结局是那个中间的东西--引擎。这是最重要的。--走进去又走出来的过程
                设置这些属性的艺术性远远超过了技术性，往往是一些美术制作人员设
                    置好各种属性（并保存为文件），然后由程序员编写的程序去执行绘制工作
                可以玩玩类似 3DS MAX 之类的软件，对理解光照、熟悉各种属性设置会有一些帮助。
                --unity也是，起码是一种理解！ 不要完全不管！ 作为对照组！！！ 
        book--Introduction to Computer Graphics
        book--interactive computer graphics 6th edition shader based 
            // take a look at the contents first:
                https://www.pearson.com/us/higher-education/product/Angel-Interactive-Computer-Graphics-A-Top-Down-Approach-with-Shader-Based-Open-GL-6th-Edition/9780132545235.html?tab=contents
            ch01
                A Graphics System--Pixels and the Frame Buffer
                Light 
                    Typical widgets include menus, scrollbars, and graphical buttons op45
                The Modeling–Rendering Paradigm
                Graphics Architectures
                ---
                Virtually all modern graphics systems are raster based
                The image we see on the output device is an array
                Detail of area around one eye showing individual pixels
                1-bit-deep frame buffer allows only two colors, whereas an 8-bit-deep frame
                    buffer allows 28 (256) colors
                it can be viewed as core element 
                qq what is frame buffer? 
                    the pixels are stored in a part of memory 
                    a part of mem that stores color info. for rendering 
                In full-color systems, there are 24 (or more) bits per pixel.
                qq what is full-color system
                High dynamic range (HDR) systems use 12
                    or more bits for each color component
                qq graphicsal func? what are needed? 
                    to assign values to the pixels in the frame buffer that best represent
                    these entities
                but to display its outline by the three line segments connecting the vertices, 
                    the graphics system
                    must generate a set of pixels that appear as line 
                    segments to the viewer
                The conversion of geometric entities to pixel colors and locations in the frame buffer is known
                    as rasterization, or scan conversion
                qq what is rasterization? 
                qq what could be inside a gpu mem? 
                    custom-tailored to carry out specific graphics functions
                The frame buffer
                    is accessed through the graphics processing unit and usually is on the same circuit
                    board as the GPU.
                qq where is framebuffer typically? modern. 
                be used as mini supercomputers for general purpose computing
                The cathode-ray tube (CRT)
                Modern displays are no longer coupled to these low frequencies and operate at rates
                    up to about 85 Hz
                Interlaced displays are used in commercial television
                Color CRTs have three different colored phosphors (red, green, and blue)
                Often called pointing devices, these devices allow a user to indicate a particular location on the display
                Another approach is to associate a function called a callback with a specific type
                    of event
                to be realistic, we need lighting, shading, and properties of materials
                we discuss the way images are formed by optical systems
                The object exists in space independent of any image-formation process and of any viewer
                One of the main functions of
                    a CAD system is to provide an interface that makes it easy for a user to 
                    build a synthetic model of the world
                In the human visual system, the image is formed on the back of the eye. In a
                    camera, the image is formed in the film plane
                A given light source has a color determined
                    by the energy that it emits at various wavelengths
                those near 450 nm are seen as blue; and
                    those near 650 nm are seen as red.
                A laser, for example, emits light at a single frequency, whereas an incandescent lamp
                    emits energy over a range of frequencies
                visible spectrum
                Geometric optics models light sources as emitters of light energy
                More complex sources, such as a light bulb, can be characterized as emitting  
                    light over an area and by emitting more light in one direction than another
                Modeling of light sources is discussed in Chapter 5.
                qq two ways of gen. images from graphics sys. 
                    We can start building an imaging model by following light from a source
                A ray is a semi-infinite line
                    that emanates from a point and travels to infinity in a particular direction
                    *it can be in two dir. : ether start from light source or start from eye 
                figure 1.8 match rays with description 
                contribute to the image. 
                provide a close approximation to the physical world, it is usually not well suited for
                    real-time computation
                surfaces that scatter the incoming light equally in all directions
                requires more computation than can be done in real time. 
                The human visual system is extremely
                    complex but still obeys the physical principles of other optical imaging systems
                using the fact that the two triangles in Figure 1.20 are similar 
                light sensors and are located on the retina
                excited by electromagnetic energy
                The rods are low-level-light sensors that account for our night vision and are not
                    color sensitive
                *qq what is the def. of the resolution? 
                    Resolution is a measure of what
                    size objects we can see. More technically, it is a measure of how close we can place two
                    points and still recognize that there are two distinct points.
                qq what happends if the two light sources are emitting the same energy, but with diff. wavelength? 
                    If these two lights were to emit the same energy, they
                    would appear to us to have different brightness, because of the unequal response
                    of the cones to red and green light.
                We are most sensitive to green light, and least
                    sensitive to red and blue.
                work with just three basic, or primary, colors. We
                    discuss color in depth in Chapter 2.
                The optic nerves  are connected to the rods and cones in an extremely complex arrangement
                sophisticated
                in the brain called the visual cortex
                where high-level functions, such as object recognition, are carried out
                *Once we have designed the scene, we want to render it, adding 
                    light sources, material properties, and a variety of other detailed effects
                form a production-quality image
                render farm, a cluster of computers configured for numerical computing
                qq what can be included in a model? 
                    Models, including the geometric objects, lights, cameras, and material properties
                We shall examine scene graphs in Chapter 8.
                adder and a multiplier
                calculation to the adder and can start its next multiplication while the adder carries
                    out the second step of the calculation on the first set of data
                the throughput of the system, has been doubled
                *gpu:large sets of vertices and pixels must be processed
                    in the same manner.
                Here we are content to  overview these steps and show that they can be pipelined
                qq what is the major task of the vertex procesing block? 
                    carry out coordinate transformations+ op68 
            ch02 -- GRAPHICS PROGRAMMING
                -all
                *2.8 The Gasket Program
                *Adding Interaction
                Double Buffering
            ch03 -- CHAPTER 3 GEOMETRIC OBJECTS AND TRANSFORMATIONS
                -all
                Quaternions
            ch04 
                Walking Through a Scene
            ch05 -- LIGHTING 
                -all 
                Polygonal Shading
                Per-Fragment Lighting
            ch06 -- CHAPTER 6 FROM VERTICES TO FRAGMENTS
                -rough 
            ch07 
                Texture Generation
                Environment Maps
                Antialiasing
                Back-to-Front and Front-to-Back Rendering
                Scene Antialiasing and Multisampling
            ch08 -- MODELING AND HIERARCHY
                -rough
            ch09 
                Physically Based Models and Particle Systems
                -rough
            ch10 -- CURVES AND SURFACES
                -all cad, mesh gen. 
            ch11 -- ADVANCED RENDERING -- RTX 
                Volume Rendering
        book--OpenGL.Programming.Guide.8th (red book )
            OpenGL doesn’t include functions for performing windowing tasks
            Execute various shaders to perform calculations on the input primitives
            execute a fragment shader for each of the fragments generated
                by rasterization
            qq what is the output of rasterization? op50
            further calcu. in fragment shader: blending the fragment’s color with the current color in that screen
            h- the OpenGL implementation provided by the manufacturer of your computer graphics hardware being the
                server. 
            opengl has client-server system, the client and server will execute on different
                machines that are connected by a network possible? y 
            the client will issue the OpenGL commands, which will be converted into 
                a windowsystem specific protocol 
            qq what is rendering? 
                create an image from models
            qq what are shaders? 
                little programs that are specifically compiled for your graphics processing unit
            qq what is vertex shader and fragment shader? 
                operate on the fragments generated by the rasterizer
            qq Both vertex and fragment shaders are required in every OpenGL program? y 
            qq what is a pixel?     
                a pixel is the smallest visible element on your display
            In the preamble of the program
            op55 
            + https://developer.nvidia.com/vulkan-turing
                ...
        book--OpenGL superbible 7t
        book--_basic_interactive_7th edition
        book--Cg教程_可编程实时图形权威指南
        book--vulkan管线
        online--https://zhuanlan.zhihu.com/p/68288999
        book--webGL
        book--[Packt Publishing] Data Visualization with D3.js Cookbook
        code--prac. vis skills with diff. kind of datasets! 
        spec-gl33
            intro. op16 
                framebuffer manipulation
                There are also calls to effect direct control of the framebuffer, such as reading and writing pixels
                obtain optimum performance in carrying out OpenGL calls
                OpenGL maintains a considerable amount of state information
                a pipeline having some programmable stages
                expected to be removed in a future version     
        spec-gl46 
        spec-vulkan1.2
        code--realistic rendering with RTX graphics card 
        paper--Evolutionary Multi-Objective Inverse Kinematics on Highly Articulated and Humanoid Robots    
            tasks in IK have different requirements in accuracy, computation time and robustness
            Evolutionary Optimisation
            Dexterous Manipulation
            Computational Intelligence
            it may be neccessary to fulfil specific
                task-dependent affordances, such as minimal displacement
                between solutions
            However, no universal solution to this problem(IK problem)
                could yet be found and many existing approaches are quite
                limited when to be extended for more challenging needs
            q- the description of IK prob. 
            from joint to Cartesian space is straightforward by recursively
                applying coordinate transformations
            analytical solutions are only available for specific robot geometries with low DOF (degrees of
                freedom). Hence, using iterative and numerical approaches
                to provide approximate solutions is typically required
            fast and robust convergence while avoiding suboptimal extrema
            anthropomorphic and humanoid robots.
            q- describe the current state of research in this field 
            solving full-body postures using the 
                +NASA Valkyrie humanoid
            multi-finger grasps
                on the KuKA LBR iiwa with the anthropomorphic Shadow
                Dexterous Hand.
            f- limitations, further steps: 
                ignoring physical properties such as mass, force or torque, as well as possible self-collisions.
            an implementation of the algorithm as a plugin for ROS 
            ref-  
    paper_pass 
    code_pass 
        LearningOpenGL
        pbrt3 

    