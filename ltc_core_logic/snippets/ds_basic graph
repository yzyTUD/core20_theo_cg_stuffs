
---
    2d array expression, not a gernal form... 
#include<cstdio>
#include<cstring>
#include<queue>
#include<stack>
using namespace std;
const int dx[4] = { 0,1,0,-1 };
const int dy[4] = { 1,0,-1,0 };

int mp[5][5];
struct Node {
	int x, y;
	int cnt;
	Node() {}
	Node(int _x, int _y, int _cnt) {
		x = _x, y = _y, cnt = _cnt;
	}
	inline bool out() {
		return x < 0 || x >= 5 || y < 0 || y >= 5;
	}
};
queue<Node> Q;
bool vis[5][5];
Node pre[5][5];
stack<Node> ans;

int main()
{
	/*memset(mp, 1, sizeof(mp));
	for (int i = 0; i < 5; i++) for (int j = 0; j < 5; j++) scanf("%d", &mp[i][j]);*/
	int maze[5][5] = {
		0, 1, 0, 0, 0,
		0, 1, 0, 1, 0,
		0, 0, 0, 0, 0,
		0, 1, 1, 1, 0,
		0, 0, 0, 1, 0,
	};
	memset(vis, 0, sizeof(vis));
	Q.push(Node( 0, 0, 0 ));
	vis[0][0] = 1;
	while (!Q.empty())
	{
		Node now = Q.front(); Q.pop();
		if (now.x == 4 && now.y == 4)
		{
			ans.push(now);
			break;
		}
		for (int k = 0; k < 4; k++)
		{
			Node nxt = Node(now.x + dx[k], now.y + dy[k], now.cnt + 1);
			if (nxt.out()) continue;
			if (maze[nxt.x][nxt.y]) continue;
			if (vis[nxt.x][nxt.y]) continue;
			Q.push(nxt);
			vis[nxt.x][nxt.y] = 1;
			pre[nxt.x][nxt.y] = now;
		}
	}

	while (ans.top().cnt) ans.push(pre[ans.top().x][ans.top().y]);
	while (!ans.empty())
	{
		printf("(%d, %d)\n", ans.top().x, ans.top().y);
		ans.pop();
	}
}


---
    adj array expression, dag graph, can have other types?, space effi. 
// A C++ program to print topological sorting of a graph 
// using indegrees. 
#include<bits/stdc++.h> 
using namespace std; 

// Class to represent a graph 
class Graph 
{ 
	int V; // No. of vertices' 

	// Pointer to an array containing adjacency listsList 
	list<int> *adj; 

public: 
	Graph(int V); // Constructor 

	// function to add an edge to graph 
	void addEdge(int u, int v); 

	// prints a Topological Sort of the complete graph 
	void topologicalSort(); 
}; 

Graph::Graph(int V) 
{ 
	this->V = V; 
	adj = new list<int>[V]; 
} 

void Graph::addEdge(int u, int v) 
{ 
	adj[u].push_back(v); 
} 

// The function to do Topological Sort. 
void Graph::topologicalSort() 
{ 
	// Create a vector to store indegrees of all 
	// vertices. Initialize all indegrees as 0. 
	vector<int> in_degree(V, 0); 

	// Traverse adjacency lists to fill indegrees of 
	// vertices. This step takes O(V+E) time 
	for (int u=0; u<V; u++) 
	{ 
		list<int>::iterator itr; 
		for (itr = adj[u].begin(); itr != adj[u].end(); itr++) 
			in_degree[*itr]++; 
	} 

	// Create an queue and enqueue all vertices with 
	// indegree 0 
	queue<int> q; 
	for (int i = 0; i < V; i++) 
		if (in_degree[i] == 0) 
			q.push(i); 

	// Initialize count of visited vertices 
	int cnt = 0; 

	// Create a vector to store result (A topological 
	// ordering of the vertices) 
	vector <int> top_order; 

	// One by one dequeue vertices from queue and enqueue 
	// adjacents if indegree of adjacent becomes 0 
	while (!q.empty()) 
	{ 
		// Extract front of queue (or perform dequeue) 
		// and add it to topological order 
		int u = q.front(); 
		q.pop(); 
		top_order.push_back(u); 

		// Iterate through all its neighbouring nodes 
		// of dequeued node u and decrease their in-degree 
		// by 1 
		list<int>::iterator itr; 
		for (itr = adj[u].begin(); itr != adj[u].end(); itr++) 

			// If in-degree becomes zero, add it to queue 
			if (--in_degree[*itr] == 0) 
				q.push(*itr); 

		cnt++; 
	} 

	// Check if there was a cycle 
	if (cnt != V) 
	{ 
		cout << "There exists a cycle in the graph\n"; 
		return; 
	} 

	// Print topological order 
	for (int i=0; i<top_order.size(); i++) 
		cout << top_order[i] << " "; 
	cout << endl; 
} 

// Driver program to test above functions 
int main() 
{ 
	// Create a graph given in the above diagram 
	Graph g(6); 
	g.addEdge(5, 2); 
	g.addEdge(5, 0); 
	g.addEdge(4, 0); 
	g.addEdge(4, 1); 
	g.addEdge(2, 3); 
	g.addEdge(3, 1); 

	cout << "Following is a Topological Sort of\n"; 
	g.topologicalSort(); 

	return 0; 
} 


---
    consists representation of a graph, the stru. of node does matter 
        -- the only dofference bet. tree, linked list 
// A C++ program to print topological sorting of a graph 
// using indegrees. 
#include<iostream> 
#include <list>
#include <vector>
#include <queue>
using namespace std;

class Node {
	
public:
	Node(string str) {
		val = str;
	}
	string val;
	vector<Node*> adjnodes;
};

// A utility function to add an edge in an 
// undirected graph. 
//void addEdge(vector<int> adj[], int u, int v)
//{
//	adj[u].push_back(v);
//	adj[v].push_back(u);
//}

void addEdge(Node* m, Node* n)
{
	m->adjnodes.push_back(n);
	n->adjnodes.push_back(m);
}

// A utility function to print the adjacency list 
// representation of graph 
void printGraph(vector<Node*> l)
{
	for (int k = 0; k < l.size(); k++) {
		cout << l[k]->val;
		for (int i = 0; i < l[k]->adjnodes.size(); i++) {
			cout << "-> " << l[k]->adjnodes[i]->val;
		}
		cout << endl;
	}
}
/*
	addEdge(adj, 0, 1);
	addEdge(adj, 0, 4);
	addEdge(adj, 1, 2);
	addEdge(adj, 1, 3);
	addEdge(adj, 1, 4);
	addEdge(adj, 2, 3);
	addEdge(adj, 3, 4);
*/
// Driver code 
int main()
{
	Node* n0 = new Node("n0");
	Node* n1 = new Node("n1");
	Node* n2 = new Node("n2");
	Node* n3 = new Node("n3");
	Node* n4 = new Node("n4");
	vector<Node*> l;
		l.push_back(n0);
		l.push_back(n1);
		l.push_back(n2);
		l.push_back(n3);
		l.push_back(n4);

	addEdge(n0, n1);
	addEdge(n0, n4);
	addEdge(n1, n2);
	addEdge(n1, n3);
	addEdge(n1, n4);
	addEdge(n2, n3);
	addEdge(n3, n4);
	printGraph(l);
	return 0;
}
